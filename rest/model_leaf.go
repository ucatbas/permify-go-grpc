/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Leaf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Leaf{}

// Leaf Leaf represents a leaf node in the permission tree.
type Leaf struct {
	ComputedUserSet *ComputedUserSet `json:"computedUserSet,omitempty"`
	TupleToUserSet *TupleToUserSet `json:"tupleToUserSet,omitempty"`
	ComputedAttribute *ComputedAttribute `json:"computedAttribute,omitempty"`
	Call *V1Call `json:"call,omitempty"`
}

// NewLeaf instantiates a new Leaf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaf() *Leaf {
	this := Leaf{}
	return &this
}

// NewLeafWithDefaults instantiates a new Leaf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeafWithDefaults() *Leaf {
	this := Leaf{}
	return &this
}

// GetComputedUserSet returns the ComputedUserSet field value if set, zero value otherwise.
func (o *Leaf) GetComputedUserSet() ComputedUserSet {
	if o == nil || IsNil(o.ComputedUserSet) {
		var ret ComputedUserSet
		return ret
	}
	return *o.ComputedUserSet
}

// GetComputedUserSetOk returns a tuple with the ComputedUserSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leaf) GetComputedUserSetOk() (*ComputedUserSet, bool) {
	if o == nil || IsNil(o.ComputedUserSet) {
		return nil, false
	}
	return o.ComputedUserSet, true
}

// HasComputedUserSet returns a boolean if a field has been set.
func (o *Leaf) HasComputedUserSet() bool {
	if o != nil && !IsNil(o.ComputedUserSet) {
		return true
	}

	return false
}

// SetComputedUserSet gets a reference to the given ComputedUserSet and assigns it to the ComputedUserSet field.
func (o *Leaf) SetComputedUserSet(v ComputedUserSet) {
	o.ComputedUserSet = &v
}

// GetTupleToUserSet returns the TupleToUserSet field value if set, zero value otherwise.
func (o *Leaf) GetTupleToUserSet() TupleToUserSet {
	if o == nil || IsNil(o.TupleToUserSet) {
		var ret TupleToUserSet
		return ret
	}
	return *o.TupleToUserSet
}

// GetTupleToUserSetOk returns a tuple with the TupleToUserSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leaf) GetTupleToUserSetOk() (*TupleToUserSet, bool) {
	if o == nil || IsNil(o.TupleToUserSet) {
		return nil, false
	}
	return o.TupleToUserSet, true
}

// HasTupleToUserSet returns a boolean if a field has been set.
func (o *Leaf) HasTupleToUserSet() bool {
	if o != nil && !IsNil(o.TupleToUserSet) {
		return true
	}

	return false
}

// SetTupleToUserSet gets a reference to the given TupleToUserSet and assigns it to the TupleToUserSet field.
func (o *Leaf) SetTupleToUserSet(v TupleToUserSet) {
	o.TupleToUserSet = &v
}

// GetComputedAttribute returns the ComputedAttribute field value if set, zero value otherwise.
func (o *Leaf) GetComputedAttribute() ComputedAttribute {
	if o == nil || IsNil(o.ComputedAttribute) {
		var ret ComputedAttribute
		return ret
	}
	return *o.ComputedAttribute
}

// GetComputedAttributeOk returns a tuple with the ComputedAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leaf) GetComputedAttributeOk() (*ComputedAttribute, bool) {
	if o == nil || IsNil(o.ComputedAttribute) {
		return nil, false
	}
	return o.ComputedAttribute, true
}

// HasComputedAttribute returns a boolean if a field has been set.
func (o *Leaf) HasComputedAttribute() bool {
	if o != nil && !IsNil(o.ComputedAttribute) {
		return true
	}

	return false
}

// SetComputedAttribute gets a reference to the given ComputedAttribute and assigns it to the ComputedAttribute field.
func (o *Leaf) SetComputedAttribute(v ComputedAttribute) {
	o.ComputedAttribute = &v
}

// GetCall returns the Call field value if set, zero value otherwise.
func (o *Leaf) GetCall() V1Call {
	if o == nil || IsNil(o.Call) {
		var ret V1Call
		return ret
	}
	return *o.Call
}

// GetCallOk returns a tuple with the Call field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leaf) GetCallOk() (*V1Call, bool) {
	if o == nil || IsNil(o.Call) {
		return nil, false
	}
	return o.Call, true
}

// HasCall returns a boolean if a field has been set.
func (o *Leaf) HasCall() bool {
	if o != nil && !IsNil(o.Call) {
		return true
	}

	return false
}

// SetCall gets a reference to the given V1Call and assigns it to the Call field.
func (o *Leaf) SetCall(v V1Call) {
	o.Call = &v
}

func (o Leaf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Leaf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComputedUserSet) {
		toSerialize["computedUserSet"] = o.ComputedUserSet
	}
	if !IsNil(o.TupleToUserSet) {
		toSerialize["tupleToUserSet"] = o.TupleToUserSet
	}
	if !IsNil(o.ComputedAttribute) {
		toSerialize["computedAttribute"] = o.ComputedAttribute
	}
	if !IsNil(o.Call) {
		toSerialize["call"] = o.Call
	}
	return toSerialize, nil
}

type NullableLeaf struct {
	value *Leaf
	isSet bool
}

func (v NullableLeaf) Get() *Leaf {
	return v.value
}

func (v *NullableLeaf) Set(val *Leaf) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaf) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaf(val *Leaf) *NullableLeaf {
	return &NullableLeaf{value: val, isSet: true}
}

func (v NullableLeaf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


