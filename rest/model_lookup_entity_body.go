/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the LookupEntityBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LookupEntityBody{}

// LookupEntityBody PermissionLookupEntityRequest is the request message for the LookupEntity method in the Permission service.
type LookupEntityBody struct {
	Metadata *PermissionLookupEntityRequestMetadata `json:"metadata,omitempty"`
	// Type of the entity to lookup, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes.
	EntityType *string `json:"entity_type,omitempty"`
	// Name of the permission to check, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes.
	Permission *string `json:"permission,omitempty"`
	Subject *Subject `json:"subject,omitempty"`
	Context *Context `json:"context,omitempty"`
}

// NewLookupEntityBody instantiates a new LookupEntityBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupEntityBody() *LookupEntityBody {
	this := LookupEntityBody{}
	return &this
}

// NewLookupEntityBodyWithDefaults instantiates a new LookupEntityBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupEntityBodyWithDefaults() *LookupEntityBody {
	this := LookupEntityBody{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *LookupEntityBody) GetMetadata() PermissionLookupEntityRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret PermissionLookupEntityRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupEntityBody) GetMetadataOk() (*PermissionLookupEntityRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LookupEntityBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PermissionLookupEntityRequestMetadata and assigns it to the Metadata field.
func (o *LookupEntityBody) SetMetadata(v PermissionLookupEntityRequestMetadata) {
	o.Metadata = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *LookupEntityBody) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupEntityBody) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *LookupEntityBody) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *LookupEntityBody) SetEntityType(v string) {
	o.EntityType = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *LookupEntityBody) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupEntityBody) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *LookupEntityBody) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *LookupEntityBody) SetPermission(v string) {
	o.Permission = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *LookupEntityBody) GetSubject() Subject {
	if o == nil || IsNil(o.Subject) {
		var ret Subject
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupEntityBody) GetSubjectOk() (*Subject, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *LookupEntityBody) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Subject and assigns it to the Subject field.
func (o *LookupEntityBody) SetSubject(v Subject) {
	o.Subject = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *LookupEntityBody) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupEntityBody) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *LookupEntityBody) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *LookupEntityBody) SetContext(v Context) {
	o.Context = &v
}

func (o LookupEntityBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LookupEntityBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.EntityType) {
		toSerialize["entity_type"] = o.EntityType
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

type NullableLookupEntityBody struct {
	value *LookupEntityBody
	isSet bool
}

func (v NullableLookupEntityBody) Get() *LookupEntityBody {
	return v.value
}

func (v *NullableLookupEntityBody) Set(val *LookupEntityBody) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupEntityBody) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupEntityBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupEntityBody(val *LookupEntityBody) *NullableLookupEntityBody {
	return &NullableLookupEntityBody{value: val, isSet: true}
}

func (v NullableLookupEntityBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupEntityBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


