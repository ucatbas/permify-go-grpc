/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the LookupSubjectBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LookupSubjectBody{}

// LookupSubjectBody PermissionLookupSubjectRequest is the request message for the LookupSubject method in the Permission service.
type LookupSubjectBody struct {
	Metadata *PermissionLookupSubjectRequestMetadata `json:"metadata,omitempty"`
	Entity *Entity `json:"entity,omitempty"`
	// Permission to be checked, can be a permission or relation. Required, and must match the pattern \"^([a-zA-Z][a-zA-Z0-9_]{1,62}[a-zA-Z0-9])$\", max 64 bytes.
	Permission *string `json:"permission,omitempty"`
	SubjectReference *RelationReference `json:"subject_reference,omitempty"`
	Context *Context `json:"context,omitempty"`
}

// NewLookupSubjectBody instantiates a new LookupSubjectBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupSubjectBody() *LookupSubjectBody {
	this := LookupSubjectBody{}
	return &this
}

// NewLookupSubjectBodyWithDefaults instantiates a new LookupSubjectBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupSubjectBodyWithDefaults() *LookupSubjectBody {
	this := LookupSubjectBody{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *LookupSubjectBody) GetMetadata() PermissionLookupSubjectRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret PermissionLookupSubjectRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupSubjectBody) GetMetadataOk() (*PermissionLookupSubjectRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LookupSubjectBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PermissionLookupSubjectRequestMetadata and assigns it to the Metadata field.
func (o *LookupSubjectBody) SetMetadata(v PermissionLookupSubjectRequestMetadata) {
	o.Metadata = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *LookupSubjectBody) GetEntity() Entity {
	if o == nil || IsNil(o.Entity) {
		var ret Entity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupSubjectBody) GetEntityOk() (*Entity, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *LookupSubjectBody) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Entity and assigns it to the Entity field.
func (o *LookupSubjectBody) SetEntity(v Entity) {
	o.Entity = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *LookupSubjectBody) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupSubjectBody) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *LookupSubjectBody) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *LookupSubjectBody) SetPermission(v string) {
	o.Permission = &v
}

// GetSubjectReference returns the SubjectReference field value if set, zero value otherwise.
func (o *LookupSubjectBody) GetSubjectReference() RelationReference {
	if o == nil || IsNil(o.SubjectReference) {
		var ret RelationReference
		return ret
	}
	return *o.SubjectReference
}

// GetSubjectReferenceOk returns a tuple with the SubjectReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupSubjectBody) GetSubjectReferenceOk() (*RelationReference, bool) {
	if o == nil || IsNil(o.SubjectReference) {
		return nil, false
	}
	return o.SubjectReference, true
}

// HasSubjectReference returns a boolean if a field has been set.
func (o *LookupSubjectBody) HasSubjectReference() bool {
	if o != nil && !IsNil(o.SubjectReference) {
		return true
	}

	return false
}

// SetSubjectReference gets a reference to the given RelationReference and assigns it to the SubjectReference field.
func (o *LookupSubjectBody) SetSubjectReference(v RelationReference) {
	o.SubjectReference = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *LookupSubjectBody) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupSubjectBody) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *LookupSubjectBody) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *LookupSubjectBody) SetContext(v Context) {
	o.Context = &v
}

func (o LookupSubjectBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LookupSubjectBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.SubjectReference) {
		toSerialize["subject_reference"] = o.SubjectReference
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

type NullableLookupSubjectBody struct {
	value *LookupSubjectBody
	isSet bool
}

func (v NullableLookupSubjectBody) Get() *LookupSubjectBody {
	return v.value
}

func (v *NullableLookupSubjectBody) Set(val *LookupSubjectBody) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupSubjectBody) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupSubjectBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupSubjectBody(val *LookupSubjectBody) *NullableLookupSubjectBody {
	return &NullableLookupSubjectBody{value: val, isSet: true}
}

func (v NullableLookupSubjectBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupSubjectBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


