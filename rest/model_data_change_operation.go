/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// DataChangeOperation  - OPERATION_CREATE: Creation operation.  - OPERATION_DELETE: Deletion operation.
type DataChangeOperation string

// List of DataChange.Operation
const (
	DATACHANGEOPERATION_CREATE DataChangeOperation = "OPERATION_CREATE"
	DATACHANGEOPERATION_DELETE DataChangeOperation = "OPERATION_DELETE"
)

// All allowed values of DataChangeOperation enum
var AllowedDataChangeOperationEnumValues = []DataChangeOperation{
	"OPERATION_CREATE",
	"OPERATION_DELETE",
}

func (v *DataChangeOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataChangeOperation(value)
	for _, existing := range AllowedDataChangeOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataChangeOperation", value)
}

// NewDataChangeOperationFromValue returns a pointer to a valid DataChangeOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataChangeOperationFromValue(v string) (*DataChangeOperation, error) {
	ev := DataChangeOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataChangeOperation: valid values are %v", v, AllowedDataChangeOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataChangeOperation) IsValid() bool {
	for _, existing := range AllowedDataChangeOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataChange.Operation value
func (v DataChangeOperation) Ptr() *DataChangeOperation {
	return &v
}

type NullableDataChangeOperation struct {
	value *DataChangeOperation
	isSet bool
}

func (v NullableDataChangeOperation) Get() *DataChangeOperation {
	return v.value
}

func (v *NullableDataChangeOperation) Set(val *DataChangeOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableDataChangeOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableDataChangeOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataChangeOperation(val *DataChangeOperation) *NullableDataChangeOperation {
	return &NullableDataChangeOperation{value: val, isSet: true}
}

func (v NullableDataChangeOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataChangeOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

