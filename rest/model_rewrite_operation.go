/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// RewriteOperation Operation enum includes potential rewrite operations. OPERATION_UNION: Represents a union operation. OPERATION_INTERSECTION: Represents an intersection operation. OPERATION_EXCLUSION: Represents an exclusion operation.   - OPERATION_UNION: Represents a union operation.  - OPERATION_INTERSECTION: Represents an intersection operation.  - OPERATION_EXCLUSION: Represents an exclusion operation.
type RewriteOperation string

// List of Rewrite.Operation
const (
	REWRITEOPERATION_UNION RewriteOperation = "OPERATION_UNION"
	REWRITEOPERATION_INTERSECTION RewriteOperation = "OPERATION_INTERSECTION"
	REWRITEOPERATION_EXCLUSION RewriteOperation = "OPERATION_EXCLUSION"
)

// All allowed values of RewriteOperation enum
var AllowedRewriteOperationEnumValues = []RewriteOperation{
	"OPERATION_UNION",
	"OPERATION_INTERSECTION",
	"OPERATION_EXCLUSION",
}

func (v *RewriteOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RewriteOperation(value)
	for _, existing := range AllowedRewriteOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RewriteOperation", value)
}

// NewRewriteOperationFromValue returns a pointer to a valid RewriteOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRewriteOperationFromValue(v string) (*RewriteOperation, error) {
	ev := RewriteOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RewriteOperation: valid values are %v", v, AllowedRewriteOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RewriteOperation) IsValid() bool {
	for _, existing := range AllowedRewriteOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Rewrite.Operation value
func (v RewriteOperation) Ptr() *RewriteOperation {
	return &v
}

type NullableRewriteOperation struct {
	value *RewriteOperation
	isSet bool
}

func (v NullableRewriteOperation) Get() *RewriteOperation {
	return v.value
}

func (v *NullableRewriteOperation) Set(val *RewriteOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRewriteOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRewriteOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewriteOperation(val *RewriteOperation) *NullableRewriteOperation {
	return &NullableRewriteOperation{value: val, isSet: true}
}

func (v NullableRewriteOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewriteOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

