/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the SubjectPermissionBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubjectPermissionBody{}

// SubjectPermissionBody PermissionSubjectPermissionRequest is the request message for the SubjectPermission method in the Permission service.
type SubjectPermissionBody struct {
	Metadata *PermissionSubjectPermissionRequestMetadata `json:"metadata,omitempty"`
	Entity *Entity `json:"entity,omitempty"`
	Subject *Subject `json:"subject,omitempty"`
	Context *Context `json:"context,omitempty"`
}

// NewSubjectPermissionBody instantiates a new SubjectPermissionBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectPermissionBody() *SubjectPermissionBody {
	this := SubjectPermissionBody{}
	return &this
}

// NewSubjectPermissionBodyWithDefaults instantiates a new SubjectPermissionBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectPermissionBodyWithDefaults() *SubjectPermissionBody {
	this := SubjectPermissionBody{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SubjectPermissionBody) GetMetadata() PermissionSubjectPermissionRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret PermissionSubjectPermissionRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectPermissionBody) GetMetadataOk() (*PermissionSubjectPermissionRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SubjectPermissionBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PermissionSubjectPermissionRequestMetadata and assigns it to the Metadata field.
func (o *SubjectPermissionBody) SetMetadata(v PermissionSubjectPermissionRequestMetadata) {
	o.Metadata = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *SubjectPermissionBody) GetEntity() Entity {
	if o == nil || IsNil(o.Entity) {
		var ret Entity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectPermissionBody) GetEntityOk() (*Entity, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *SubjectPermissionBody) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Entity and assigns it to the Entity field.
func (o *SubjectPermissionBody) SetEntity(v Entity) {
	o.Entity = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SubjectPermissionBody) GetSubject() Subject {
	if o == nil || IsNil(o.Subject) {
		var ret Subject
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectPermissionBody) GetSubjectOk() (*Subject, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SubjectPermissionBody) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Subject and assigns it to the Subject field.
func (o *SubjectPermissionBody) SetSubject(v Subject) {
	o.Subject = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SubjectPermissionBody) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectPermissionBody) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SubjectPermissionBody) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *SubjectPermissionBody) SetContext(v Context) {
	o.Context = &v
}

func (o SubjectPermissionBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubjectPermissionBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

type NullableSubjectPermissionBody struct {
	value *SubjectPermissionBody
	isSet bool
}

func (v NullableSubjectPermissionBody) Get() *SubjectPermissionBody {
	return v.value
}

func (v *NullableSubjectPermissionBody) Set(val *SubjectPermissionBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectPermissionBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectPermissionBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectPermissionBody(val *SubjectPermissionBody) *NullableSubjectPermissionBody {
	return &NullableSubjectPermissionBody{value: val, isSet: true}
}

func (v NullableSubjectPermissionBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectPermissionBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


