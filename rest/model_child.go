/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Child type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Child{}

// Child Child represents a node in the permission tree.
type Child struct {
	Leaf *Leaf `json:"leaf,omitempty"`
	Rewrite *Rewrite `json:"rewrite,omitempty"`
}

// NewChild instantiates a new Child object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChild() *Child {
	this := Child{}
	return &this
}

// NewChildWithDefaults instantiates a new Child object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildWithDefaults() *Child {
	this := Child{}
	return &this
}

// GetLeaf returns the Leaf field value if set, zero value otherwise.
func (o *Child) GetLeaf() Leaf {
	if o == nil || IsNil(o.Leaf) {
		var ret Leaf
		return ret
	}
	return *o.Leaf
}

// GetLeafOk returns a tuple with the Leaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Child) GetLeafOk() (*Leaf, bool) {
	if o == nil || IsNil(o.Leaf) {
		return nil, false
	}
	return o.Leaf, true
}

// HasLeaf returns a boolean if a field has been set.
func (o *Child) HasLeaf() bool {
	if o != nil && !IsNil(o.Leaf) {
		return true
	}

	return false
}

// SetLeaf gets a reference to the given Leaf and assigns it to the Leaf field.
func (o *Child) SetLeaf(v Leaf) {
	o.Leaf = &v
}

// GetRewrite returns the Rewrite field value if set, zero value otherwise.
func (o *Child) GetRewrite() Rewrite {
	if o == nil || IsNil(o.Rewrite) {
		var ret Rewrite
		return ret
	}
	return *o.Rewrite
}

// GetRewriteOk returns a tuple with the Rewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Child) GetRewriteOk() (*Rewrite, bool) {
	if o == nil || IsNil(o.Rewrite) {
		return nil, false
	}
	return o.Rewrite, true
}

// HasRewrite returns a boolean if a field has been set.
func (o *Child) HasRewrite() bool {
	if o != nil && !IsNil(o.Rewrite) {
		return true
	}

	return false
}

// SetRewrite gets a reference to the given Rewrite and assigns it to the Rewrite field.
func (o *Child) SetRewrite(v Rewrite) {
	o.Rewrite = &v
}

func (o Child) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Child) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Leaf) {
		toSerialize["leaf"] = o.Leaf
	}
	if !IsNil(o.Rewrite) {
		toSerialize["rewrite"] = o.Rewrite
	}
	return toSerialize, nil
}

type NullableChild struct {
	value *Child
	isSet bool
}

func (v NullableChild) Get() *Child {
	return v.value
}

func (v *NullableChild) Set(val *Child) {
	v.value = val
	v.isSet = true
}

func (v NullableChild) IsSet() bool {
	return v.isSet
}

func (v *NullableChild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChild(val *Child) *NullableChild {
	return &NullableChild{value: val, isSet: true}
}

func (v NullableChild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


