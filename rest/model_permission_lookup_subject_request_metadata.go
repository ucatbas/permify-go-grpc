/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the PermissionLookupSubjectRequestMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionLookupSubjectRequestMetadata{}

// PermissionLookupSubjectRequestMetadata PermissionLookupSubjectRequestMetadata metadata for the PermissionLookupSubjectRequest.
type PermissionLookupSubjectRequestMetadata struct {
	// Version of the schema.
	SchemaVersion *string `json:"schema_version,omitempty"`
	// The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).
	SnapToken *string `json:"snap_token,omitempty"`
	// Query limit when if recursive database queries got in loop.
	Depth *int32 `json:"depth,omitempty"`
}

// NewPermissionLookupSubjectRequestMetadata instantiates a new PermissionLookupSubjectRequestMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionLookupSubjectRequestMetadata() *PermissionLookupSubjectRequestMetadata {
	this := PermissionLookupSubjectRequestMetadata{}
	return &this
}

// NewPermissionLookupSubjectRequestMetadataWithDefaults instantiates a new PermissionLookupSubjectRequestMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionLookupSubjectRequestMetadataWithDefaults() *PermissionLookupSubjectRequestMetadata {
	this := PermissionLookupSubjectRequestMetadata{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *PermissionLookupSubjectRequestMetadata) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionLookupSubjectRequestMetadata) GetSchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *PermissionLookupSubjectRequestMetadata) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *PermissionLookupSubjectRequestMetadata) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetSnapToken returns the SnapToken field value if set, zero value otherwise.
func (o *PermissionLookupSubjectRequestMetadata) GetSnapToken() string {
	if o == nil || IsNil(o.SnapToken) {
		var ret string
		return ret
	}
	return *o.SnapToken
}

// GetSnapTokenOk returns a tuple with the SnapToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionLookupSubjectRequestMetadata) GetSnapTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SnapToken) {
		return nil, false
	}
	return o.SnapToken, true
}

// HasSnapToken returns a boolean if a field has been set.
func (o *PermissionLookupSubjectRequestMetadata) HasSnapToken() bool {
	if o != nil && !IsNil(o.SnapToken) {
		return true
	}

	return false
}

// SetSnapToken gets a reference to the given string and assigns it to the SnapToken field.
func (o *PermissionLookupSubjectRequestMetadata) SetSnapToken(v string) {
	o.SnapToken = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *PermissionLookupSubjectRequestMetadata) GetDepth() int32 {
	if o == nil || IsNil(o.Depth) {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionLookupSubjectRequestMetadata) GetDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.Depth) {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *PermissionLookupSubjectRequestMetadata) HasDepth() bool {
	if o != nil && !IsNil(o.Depth) {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *PermissionLookupSubjectRequestMetadata) SetDepth(v int32) {
	o.Depth = &v
}

func (o PermissionLookupSubjectRequestMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionLookupSubjectRequestMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	if !IsNil(o.SnapToken) {
		toSerialize["snap_token"] = o.SnapToken
	}
	if !IsNil(o.Depth) {
		toSerialize["depth"] = o.Depth
	}
	return toSerialize, nil
}

type NullablePermissionLookupSubjectRequestMetadata struct {
	value *PermissionLookupSubjectRequestMetadata
	isSet bool
}

func (v NullablePermissionLookupSubjectRequestMetadata) Get() *PermissionLookupSubjectRequestMetadata {
	return v.value
}

func (v *NullablePermissionLookupSubjectRequestMetadata) Set(val *PermissionLookupSubjectRequestMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionLookupSubjectRequestMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionLookupSubjectRequestMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionLookupSubjectRequestMetadata(val *PermissionLookupSubjectRequestMetadata) *NullablePermissionLookupSubjectRequestMetadata {
	return &NullablePermissionLookupSubjectRequestMetadata{value: val, isSet: true}
}

func (v NullablePermissionLookupSubjectRequestMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionLookupSubjectRequestMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


