/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the RelationshipWriteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipWriteResponse{}

// RelationshipWriteResponse struct for RelationshipWriteResponse
type RelationshipWriteResponse struct {
	// The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)
	SnapToken *string `json:"snap_token,omitempty"`
}

// NewRelationshipWriteResponse instantiates a new RelationshipWriteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipWriteResponse() *RelationshipWriteResponse {
	this := RelationshipWriteResponse{}
	return &this
}

// NewRelationshipWriteResponseWithDefaults instantiates a new RelationshipWriteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipWriteResponseWithDefaults() *RelationshipWriteResponse {
	this := RelationshipWriteResponse{}
	return &this
}

// GetSnapToken returns the SnapToken field value if set, zero value otherwise.
func (o *RelationshipWriteResponse) GetSnapToken() string {
	if o == nil || IsNil(o.SnapToken) {
		var ret string
		return ret
	}
	return *o.SnapToken
}

// GetSnapTokenOk returns a tuple with the SnapToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipWriteResponse) GetSnapTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SnapToken) {
		return nil, false
	}
	return o.SnapToken, true
}

// HasSnapToken returns a boolean if a field has been set.
func (o *RelationshipWriteResponse) HasSnapToken() bool {
	if o != nil && !IsNil(o.SnapToken) {
		return true
	}

	return false
}

// SetSnapToken gets a reference to the given string and assigns it to the SnapToken field.
func (o *RelationshipWriteResponse) SetSnapToken(v string) {
	o.SnapToken = &v
}

func (o RelationshipWriteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipWriteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SnapToken) {
		toSerialize["snap_token"] = o.SnapToken
	}
	return toSerialize, nil
}

type NullableRelationshipWriteResponse struct {
	value *RelationshipWriteResponse
	isSet bool
}

func (v NullableRelationshipWriteResponse) Get() *RelationshipWriteResponse {
	return v.value
}

func (v *NullableRelationshipWriteResponse) Set(val *RelationshipWriteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipWriteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipWriteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipWriteResponse(val *RelationshipWriteResponse) *NullableRelationshipWriteResponse {
	return &NullableRelationshipWriteResponse{value: val, isSet: true}
}

func (v NullableRelationshipWriteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipWriteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


