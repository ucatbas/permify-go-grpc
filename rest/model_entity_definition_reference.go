/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// EntityDefinitionReference The Reference enum specifies whether a name pertains to a relation, permission, or attribute.   - REFERENCE_RELATION: Indicates that the name refers to a relation.  - REFERENCE_PERMISSION: Indicates that the name refers to a permission.  - REFERENCE_ATTRIBUTE: Indicates that the name refers to an attribute.
type EntityDefinitionReference string

// List of EntityDefinition.Reference
const (
	ENTITYDEFINITIONREFERENCE_RELATION EntityDefinitionReference = "REFERENCE_RELATION"
	ENTITYDEFINITIONREFERENCE_PERMISSION EntityDefinitionReference = "REFERENCE_PERMISSION"
	ENTITYDEFINITIONREFERENCE_ATTRIBUTE EntityDefinitionReference = "REFERENCE_ATTRIBUTE"
)

// All allowed values of EntityDefinitionReference enum
var AllowedEntityDefinitionReferenceEnumValues = []EntityDefinitionReference{
	"REFERENCE_RELATION",
	"REFERENCE_PERMISSION",
	"REFERENCE_ATTRIBUTE",
}

func (v *EntityDefinitionReference) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntityDefinitionReference(value)
	for _, existing := range AllowedEntityDefinitionReferenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntityDefinitionReference", value)
}

// NewEntityDefinitionReferenceFromValue returns a pointer to a valid EntityDefinitionReference
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityDefinitionReferenceFromValue(v string) (*EntityDefinitionReference, error) {
	ev := EntityDefinitionReference(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntityDefinitionReference: valid values are %v", v, AllowedEntityDefinitionReferenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityDefinitionReference) IsValid() bool {
	for _, existing := range AllowedEntityDefinitionReferenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntityDefinition.Reference value
func (v EntityDefinitionReference) Ptr() *EntityDefinitionReference {
	return &v
}

type NullableEntityDefinitionReference struct {
	value *EntityDefinitionReference
	isSet bool
}

func (v NullableEntityDefinitionReference) Get() *EntityDefinitionReference {
	return v.value
}

func (v *NullableEntityDefinitionReference) Set(val *EntityDefinitionReference) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityDefinitionReference) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityDefinitionReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityDefinitionReference(val *EntityDefinitionReference) *NullableEntityDefinitionReference {
	return &NullableEntityDefinitionReference{value: val, isSet: true}
}

func (v NullableEntityDefinitionReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityDefinitionReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

