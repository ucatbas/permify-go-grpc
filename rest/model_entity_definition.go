/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the EntityDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityDefinition{}

// EntityDefinition The EntityDefinition message provides detailed information about a specific entity.
type EntityDefinition struct {
	// The name of the entity, which follows a specific string pattern and has a maximum byte size.
	Name *string `json:"name,omitempty"`
	// Map of relation definitions within this entity. The key is the relation name, and the value is the RelationDefinition.
	Relations *map[string]RelationDefinition `json:"relations,omitempty"`
	// Map of permission definitions within this entity. The key is the permission name, and the value is the PermissionDefinition.
	Permissions *map[string]PermissionDefinition `json:"permissions,omitempty"`
	// Map of attribute definitions within this entity. The key is the attribute name, and the value is the AttributeDefinition.
	Attributes *map[string]AttributeDefinition `json:"attributes,omitempty"`
	// Map of references indicating whether a string pertains to a relation, permission, or attribute.
	References *map[string]EntityDefinitionReference `json:"references,omitempty"`
}

// NewEntityDefinition instantiates a new EntityDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityDefinition() *EntityDefinition {
	this := EntityDefinition{}
	return &this
}

// NewEntityDefinitionWithDefaults instantiates a new EntityDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityDefinitionWithDefaults() *EntityDefinition {
	this := EntityDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityDefinition) SetName(v string) {
	o.Name = &v
}

// GetRelations returns the Relations field value if set, zero value otherwise.
func (o *EntityDefinition) GetRelations() map[string]RelationDefinition {
	if o == nil || IsNil(o.Relations) {
		var ret map[string]RelationDefinition
		return ret
	}
	return *o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDefinition) GetRelationsOk() (*map[string]RelationDefinition, bool) {
	if o == nil || IsNil(o.Relations) {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *EntityDefinition) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given map[string]RelationDefinition and assigns it to the Relations field.
func (o *EntityDefinition) SetRelations(v map[string]RelationDefinition) {
	o.Relations = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *EntityDefinition) GetPermissions() map[string]PermissionDefinition {
	if o == nil || IsNil(o.Permissions) {
		var ret map[string]PermissionDefinition
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDefinition) GetPermissionsOk() (*map[string]PermissionDefinition, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *EntityDefinition) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]PermissionDefinition and assigns it to the Permissions field.
func (o *EntityDefinition) SetPermissions(v map[string]PermissionDefinition) {
	o.Permissions = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *EntityDefinition) GetAttributes() map[string]AttributeDefinition {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]AttributeDefinition
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDefinition) GetAttributesOk() (*map[string]AttributeDefinition, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *EntityDefinition) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]AttributeDefinition and assigns it to the Attributes field.
func (o *EntityDefinition) SetAttributes(v map[string]AttributeDefinition) {
	o.Attributes = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *EntityDefinition) GetReferences() map[string]EntityDefinitionReference {
	if o == nil || IsNil(o.References) {
		var ret map[string]EntityDefinitionReference
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDefinition) GetReferencesOk() (*map[string]EntityDefinitionReference, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *EntityDefinition) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given map[string]EntityDefinitionReference and assigns it to the References field.
func (o *EntityDefinition) SetReferences(v map[string]EntityDefinitionReference) {
	o.References = &v
}

func (o EntityDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Relations) {
		toSerialize["relations"] = o.Relations
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	return toSerialize, nil
}

type NullableEntityDefinition struct {
	value *EntityDefinition
	isSet bool
}

func (v NullableEntityDefinition) Get() *EntityDefinition {
	return v.value
}

func (v *NullableEntityDefinition) Set(val *EntityDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityDefinition(val *EntityDefinition) *NullableEntityDefinition {
	return &NullableEntityDefinition{value: val, isSet: true}
}

func (v NullableEntityDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


