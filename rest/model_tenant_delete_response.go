/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the TenantDeleteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantDeleteResponse{}

// TenantDeleteResponse TenantDeleteResponse is the message returned from the request to delete a tenant.
type TenantDeleteResponse struct {
	Tenant *Tenant `json:"tenant,omitempty"`
}

// NewTenantDeleteResponse instantiates a new TenantDeleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantDeleteResponse() *TenantDeleteResponse {
	this := TenantDeleteResponse{}
	return &this
}

// NewTenantDeleteResponseWithDefaults instantiates a new TenantDeleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantDeleteResponseWithDefaults() *TenantDeleteResponse {
	this := TenantDeleteResponse{}
	return &this
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *TenantDeleteResponse) GetTenant() Tenant {
	if o == nil || IsNil(o.Tenant) {
		var ret Tenant
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantDeleteResponse) GetTenantOk() (*Tenant, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *TenantDeleteResponse) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given Tenant and assigns it to the Tenant field.
func (o *TenantDeleteResponse) SetTenant(v Tenant) {
	o.Tenant = &v
}

func (o TenantDeleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantDeleteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	return toSerialize, nil
}

type NullableTenantDeleteResponse struct {
	value *TenantDeleteResponse
	isSet bool
}

func (v NullableTenantDeleteResponse) Get() *TenantDeleteResponse {
	return v.value
}

func (v *NullableTenantDeleteResponse) Set(val *TenantDeleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantDeleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantDeleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantDeleteResponse(val *TenantDeleteResponse) *NullableTenantDeleteResponse {
	return &NullableTenantDeleteResponse{value: val, isSet: true}
}

func (v NullableTenantDeleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantDeleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


