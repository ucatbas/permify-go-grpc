/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the SchemaList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaList{}

// SchemaList struct for SchemaList
type SchemaList struct {
	Version *string `json:"version,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
}

// NewSchemaList instantiates a new SchemaList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaList() *SchemaList {
	this := SchemaList{}
	return &this
}

// NewSchemaListWithDefaults instantiates a new SchemaList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaListWithDefaults() *SchemaList {
	this := SchemaList{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SchemaList) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaList) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SchemaList) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SchemaList) SetVersion(v string) {
	o.Version = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SchemaList) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaList) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SchemaList) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SchemaList) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o SchemaList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSchemaList struct {
	value *SchemaList
	isSet bool
}

func (v NullableSchemaList) Get() *SchemaList {
	return v.value
}

func (v *NullableSchemaList) Set(val *SchemaList) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaList) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaList(val *SchemaList) *NullableSchemaList {
	return &NullableSchemaList{value: val, isSet: true}
}

func (v NullableSchemaList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


