/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Subjects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subjects{}

// Subjects Subjects holds a repeated field of Subject type.
type Subjects struct {
	// A list of subjects.
	Subjects []Subject `json:"subjects,omitempty"`
}

// NewSubjects instantiates a new Subjects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjects() *Subjects {
	this := Subjects{}
	return &this
}

// NewSubjectsWithDefaults instantiates a new Subjects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectsWithDefaults() *Subjects {
	this := Subjects{}
	return &this
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *Subjects) GetSubjects() []Subject {
	if o == nil || IsNil(o.Subjects) {
		var ret []Subject
		return ret
	}
	return o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subjects) GetSubjectsOk() ([]Subject, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *Subjects) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []Subject and assigns it to the Subjects field.
func (o *Subjects) SetSubjects(v []Subject) {
	o.Subjects = v
}

func (o Subjects) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subjects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	return toSerialize, nil
}

type NullableSubjects struct {
	value *Subjects
	isSet bool
}

func (v NullableSubjects) Get() *Subjects {
	return v.value
}

func (v *NullableSubjects) Set(val *Subjects) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjects) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjects(val *Subjects) *NullableSubjects {
	return &NullableSubjects{value: val, isSet: true}
}

func (v NullableSubjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


