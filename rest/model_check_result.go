/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// CheckResult Enumerates results of a check operation.   - CHECK_RESULT_ALLOWED: Represents a successful check (the check allowed the operation).  - CHECK_RESULT_DENIED: Represents a failed check (the check denied the operation).
type CheckResult string

// List of CheckResult
const (
	CHECKRESULT_ALLOWED CheckResult = "CHECK_RESULT_ALLOWED"
	CHECKRESULT_DENIED CheckResult = "CHECK_RESULT_DENIED"
)

// All allowed values of CheckResult enum
var AllowedCheckResultEnumValues = []CheckResult{
	"CHECK_RESULT_ALLOWED",
	"CHECK_RESULT_DENIED",
}

func (v *CheckResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CheckResult(value)
	for _, existing := range AllowedCheckResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CheckResult", value)
}

// NewCheckResultFromValue returns a pointer to a valid CheckResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCheckResultFromValue(v string) (*CheckResult, error) {
	ev := CheckResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CheckResult: valid values are %v", v, AllowedCheckResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CheckResult) IsValid() bool {
	for _, existing := range AllowedCheckResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CheckResult value
func (v CheckResult) Ptr() *CheckResult {
	return &v
}

type NullableCheckResult struct {
	value *CheckResult
	isSet bool
}

func (v NullableCheckResult) Get() *CheckResult {
	return v.value
}

func (v *NullableCheckResult) Set(val *CheckResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckResult(val *CheckResult) *NullableCheckResult {
	return &NullableCheckResult{value: val, isSet: true}
}

func (v NullableCheckResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

