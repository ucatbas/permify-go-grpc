/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the RelationshipReadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipReadResponse{}

// RelationshipReadResponse RelationshipReadResponse defines the structure of the response after reading relationships. It includes the tuples representing the relationships and a continuous token for handling result pagination.
type RelationshipReadResponse struct {
	// tuples is a list of the relationships retrieved in the read operation, represented as entity-relation-entity triples.
	Tuples []Tuple `json:"tuples,omitempty"`
	// continuous_token is used in the case of paginated reads to retrieve the next page of results.
	ContinuousToken *string `json:"continuous_token,omitempty"`
}

// NewRelationshipReadResponse instantiates a new RelationshipReadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipReadResponse() *RelationshipReadResponse {
	this := RelationshipReadResponse{}
	return &this
}

// NewRelationshipReadResponseWithDefaults instantiates a new RelationshipReadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipReadResponseWithDefaults() *RelationshipReadResponse {
	this := RelationshipReadResponse{}
	return &this
}

// GetTuples returns the Tuples field value if set, zero value otherwise.
func (o *RelationshipReadResponse) GetTuples() []Tuple {
	if o == nil || IsNil(o.Tuples) {
		var ret []Tuple
		return ret
	}
	return o.Tuples
}

// GetTuplesOk returns a tuple with the Tuples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipReadResponse) GetTuplesOk() ([]Tuple, bool) {
	if o == nil || IsNil(o.Tuples) {
		return nil, false
	}
	return o.Tuples, true
}

// HasTuples returns a boolean if a field has been set.
func (o *RelationshipReadResponse) HasTuples() bool {
	if o != nil && !IsNil(o.Tuples) {
		return true
	}

	return false
}

// SetTuples gets a reference to the given []Tuple and assigns it to the Tuples field.
func (o *RelationshipReadResponse) SetTuples(v []Tuple) {
	o.Tuples = v
}

// GetContinuousToken returns the ContinuousToken field value if set, zero value otherwise.
func (o *RelationshipReadResponse) GetContinuousToken() string {
	if o == nil || IsNil(o.ContinuousToken) {
		var ret string
		return ret
	}
	return *o.ContinuousToken
}

// GetContinuousTokenOk returns a tuple with the ContinuousToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipReadResponse) GetContinuousTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuousToken) {
		return nil, false
	}
	return o.ContinuousToken, true
}

// HasContinuousToken returns a boolean if a field has been set.
func (o *RelationshipReadResponse) HasContinuousToken() bool {
	if o != nil && !IsNil(o.ContinuousToken) {
		return true
	}

	return false
}

// SetContinuousToken gets a reference to the given string and assigns it to the ContinuousToken field.
func (o *RelationshipReadResponse) SetContinuousToken(v string) {
	o.ContinuousToken = &v
}

func (o RelationshipReadResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipReadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tuples) {
		toSerialize["tuples"] = o.Tuples
	}
	if !IsNil(o.ContinuousToken) {
		toSerialize["continuous_token"] = o.ContinuousToken
	}
	return toSerialize, nil
}

type NullableRelationshipReadResponse struct {
	value *RelationshipReadResponse
	isSet bool
}

func (v NullableRelationshipReadResponse) Get() *RelationshipReadResponse {
	return v.value
}

func (v *NullableRelationshipReadResponse) Set(val *RelationshipReadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipReadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipReadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipReadResponse(val *RelationshipReadResponse) *NullableRelationshipReadResponse {
	return &NullableRelationshipReadResponse{value: val, isSet: true}
}

func (v NullableRelationshipReadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipReadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


