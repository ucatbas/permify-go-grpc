/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the ExpandTreeNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpandTreeNode{}

// ExpandTreeNode ExpandTreeNode represents a node in an expansion tree with a specific operation and its children.
type ExpandTreeNode struct {
	Operation *ExpandTreeNodeOperation `json:"operation,omitempty"`
	Children []V1Expand `json:"children,omitempty"`
}

// NewExpandTreeNode instantiates a new ExpandTreeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpandTreeNode() *ExpandTreeNode {
	this := ExpandTreeNode{}
	return &this
}

// NewExpandTreeNodeWithDefaults instantiates a new ExpandTreeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpandTreeNodeWithDefaults() *ExpandTreeNode {
	this := ExpandTreeNode{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *ExpandTreeNode) GetOperation() ExpandTreeNodeOperation {
	if o == nil || IsNil(o.Operation) {
		var ret ExpandTreeNodeOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandTreeNode) GetOperationOk() (*ExpandTreeNodeOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *ExpandTreeNode) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given ExpandTreeNodeOperation and assigns it to the Operation field.
func (o *ExpandTreeNode) SetOperation(v ExpandTreeNodeOperation) {
	o.Operation = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ExpandTreeNode) GetChildren() []V1Expand {
	if o == nil || IsNil(o.Children) {
		var ret []V1Expand
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandTreeNode) GetChildrenOk() ([]V1Expand, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ExpandTreeNode) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []V1Expand and assigns it to the Children field.
func (o *ExpandTreeNode) SetChildren(v []V1Expand) {
	o.Children = v
}

func (o ExpandTreeNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpandTreeNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableExpandTreeNode struct {
	value *ExpandTreeNode
	isSet bool
}

func (v NullableExpandTreeNode) Get() *ExpandTreeNode {
	return v.value
}

func (v *NullableExpandTreeNode) Set(val *ExpandTreeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandTreeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandTreeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandTreeNode(val *ExpandTreeNode) *NullableExpandTreeNode {
	return &NullableExpandTreeNode{value: val, isSet: true}
}

func (v NullableExpandTreeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandTreeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


