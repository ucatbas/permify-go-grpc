/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the EntityFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityFilter{}

// EntityFilter EntityFilter is used to filter entities based on the type and ids.
type EntityFilter struct {
	Type *string `json:"type,omitempty"`
	Ids []string `json:"ids,omitempty"`
}

// NewEntityFilter instantiates a new EntityFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityFilter() *EntityFilter {
	this := EntityFilter{}
	return &this
}

// NewEntityFilterWithDefaults instantiates a new EntityFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityFilterWithDefaults() *EntityFilter {
	this := EntityFilter{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityFilter) SetType(v string) {
	o.Type = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *EntityFilter) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityFilter) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *EntityFilter) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *EntityFilter) SetIds(v []string) {
	o.Ids = v
}

func (o EntityFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	return toSerialize, nil
}

type NullableEntityFilter struct {
	value *EntityFilter
	isSet bool
}

func (v NullableEntityFilter) Get() *EntityFilter {
	return v.value
}

func (v *NullableEntityFilter) Set(val *EntityFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityFilter(val *EntityFilter) *NullableEntityFilter {
	return &NullableEntityFilter{value: val, isSet: true}
}

func (v NullableEntityFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


