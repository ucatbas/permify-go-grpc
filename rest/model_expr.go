/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Expr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Expr{}

// Expr An abstract representation of a common expression.  Expressions are abstractly represented as a collection of identifiers, select statements, function calls, literals, and comprehensions. All operators with the exception of the '.' operator are modelled as function calls. This makes it easy to represent new operators into the existing AST.  All references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at type-check for an expression to be valid. A reference may either be a bare identifier `name` or a qualified identifier `google.api.name`. References may either refer to a value or a function declaration.  For example, the expression `google.api.name.startsWith('expr')` references the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and the function declaration `startsWith`.
type Expr struct {
	// Required. An id assigned to this node by the parser which is unique in a given expression tree. This is used to associate type information and other attributes to a node in the parse tree.
	Id *string `json:"id,omitempty"`
	ConstExpr *Constant `json:"constExpr,omitempty"`
	IdentExpr *Ident `json:"identExpr,omitempty"`
	SelectExpr *Select `json:"selectExpr,omitempty"`
	CallExpr *ExprCall `json:"callExpr,omitempty"`
	ListExpr *CreateList `json:"listExpr,omitempty"`
	StructExpr *CreateStruct `json:"structExpr,omitempty"`
	ComprehensionExpr *Comprehension `json:"comprehensionExpr,omitempty"`
}

// NewExpr instantiates a new Expr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpr() *Expr {
	this := Expr{}
	return &this
}

// NewExprWithDefaults instantiates a new Expr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExprWithDefaults() *Expr {
	this := Expr{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Expr) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Expr) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Expr) SetId(v string) {
	o.Id = &v
}

// GetConstExpr returns the ConstExpr field value if set, zero value otherwise.
func (o *Expr) GetConstExpr() Constant {
	if o == nil || IsNil(o.ConstExpr) {
		var ret Constant
		return ret
	}
	return *o.ConstExpr
}

// GetConstExprOk returns a tuple with the ConstExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetConstExprOk() (*Constant, bool) {
	if o == nil || IsNil(o.ConstExpr) {
		return nil, false
	}
	return o.ConstExpr, true
}

// HasConstExpr returns a boolean if a field has been set.
func (o *Expr) HasConstExpr() bool {
	if o != nil && !IsNil(o.ConstExpr) {
		return true
	}

	return false
}

// SetConstExpr gets a reference to the given Constant and assigns it to the ConstExpr field.
func (o *Expr) SetConstExpr(v Constant) {
	o.ConstExpr = &v
}

// GetIdentExpr returns the IdentExpr field value if set, zero value otherwise.
func (o *Expr) GetIdentExpr() Ident {
	if o == nil || IsNil(o.IdentExpr) {
		var ret Ident
		return ret
	}
	return *o.IdentExpr
}

// GetIdentExprOk returns a tuple with the IdentExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetIdentExprOk() (*Ident, bool) {
	if o == nil || IsNil(o.IdentExpr) {
		return nil, false
	}
	return o.IdentExpr, true
}

// HasIdentExpr returns a boolean if a field has been set.
func (o *Expr) HasIdentExpr() bool {
	if o != nil && !IsNil(o.IdentExpr) {
		return true
	}

	return false
}

// SetIdentExpr gets a reference to the given Ident and assigns it to the IdentExpr field.
func (o *Expr) SetIdentExpr(v Ident) {
	o.IdentExpr = &v
}

// GetSelectExpr returns the SelectExpr field value if set, zero value otherwise.
func (o *Expr) GetSelectExpr() Select {
	if o == nil || IsNil(o.SelectExpr) {
		var ret Select
		return ret
	}
	return *o.SelectExpr
}

// GetSelectExprOk returns a tuple with the SelectExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetSelectExprOk() (*Select, bool) {
	if o == nil || IsNil(o.SelectExpr) {
		return nil, false
	}
	return o.SelectExpr, true
}

// HasSelectExpr returns a boolean if a field has been set.
func (o *Expr) HasSelectExpr() bool {
	if o != nil && !IsNil(o.SelectExpr) {
		return true
	}

	return false
}

// SetSelectExpr gets a reference to the given Select and assigns it to the SelectExpr field.
func (o *Expr) SetSelectExpr(v Select) {
	o.SelectExpr = &v
}

// GetCallExpr returns the CallExpr field value if set, zero value otherwise.
func (o *Expr) GetCallExpr() ExprCall {
	if o == nil || IsNil(o.CallExpr) {
		var ret ExprCall
		return ret
	}
	return *o.CallExpr
}

// GetCallExprOk returns a tuple with the CallExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetCallExprOk() (*ExprCall, bool) {
	if o == nil || IsNil(o.CallExpr) {
		return nil, false
	}
	return o.CallExpr, true
}

// HasCallExpr returns a boolean if a field has been set.
func (o *Expr) HasCallExpr() bool {
	if o != nil && !IsNil(o.CallExpr) {
		return true
	}

	return false
}

// SetCallExpr gets a reference to the given ExprCall and assigns it to the CallExpr field.
func (o *Expr) SetCallExpr(v ExprCall) {
	o.CallExpr = &v
}

// GetListExpr returns the ListExpr field value if set, zero value otherwise.
func (o *Expr) GetListExpr() CreateList {
	if o == nil || IsNil(o.ListExpr) {
		var ret CreateList
		return ret
	}
	return *o.ListExpr
}

// GetListExprOk returns a tuple with the ListExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetListExprOk() (*CreateList, bool) {
	if o == nil || IsNil(o.ListExpr) {
		return nil, false
	}
	return o.ListExpr, true
}

// HasListExpr returns a boolean if a field has been set.
func (o *Expr) HasListExpr() bool {
	if o != nil && !IsNil(o.ListExpr) {
		return true
	}

	return false
}

// SetListExpr gets a reference to the given CreateList and assigns it to the ListExpr field.
func (o *Expr) SetListExpr(v CreateList) {
	o.ListExpr = &v
}

// GetStructExpr returns the StructExpr field value if set, zero value otherwise.
func (o *Expr) GetStructExpr() CreateStruct {
	if o == nil || IsNil(o.StructExpr) {
		var ret CreateStruct
		return ret
	}
	return *o.StructExpr
}

// GetStructExprOk returns a tuple with the StructExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetStructExprOk() (*CreateStruct, bool) {
	if o == nil || IsNil(o.StructExpr) {
		return nil, false
	}
	return o.StructExpr, true
}

// HasStructExpr returns a boolean if a field has been set.
func (o *Expr) HasStructExpr() bool {
	if o != nil && !IsNil(o.StructExpr) {
		return true
	}

	return false
}

// SetStructExpr gets a reference to the given CreateStruct and assigns it to the StructExpr field.
func (o *Expr) SetStructExpr(v CreateStruct) {
	o.StructExpr = &v
}

// GetComprehensionExpr returns the ComprehensionExpr field value if set, zero value otherwise.
func (o *Expr) GetComprehensionExpr() Comprehension {
	if o == nil || IsNil(o.ComprehensionExpr) {
		var ret Comprehension
		return ret
	}
	return *o.ComprehensionExpr
}

// GetComprehensionExprOk returns a tuple with the ComprehensionExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetComprehensionExprOk() (*Comprehension, bool) {
	if o == nil || IsNil(o.ComprehensionExpr) {
		return nil, false
	}
	return o.ComprehensionExpr, true
}

// HasComprehensionExpr returns a boolean if a field has been set.
func (o *Expr) HasComprehensionExpr() bool {
	if o != nil && !IsNil(o.ComprehensionExpr) {
		return true
	}

	return false
}

// SetComprehensionExpr gets a reference to the given Comprehension and assigns it to the ComprehensionExpr field.
func (o *Expr) SetComprehensionExpr(v Comprehension) {
	o.ComprehensionExpr = &v
}

func (o Expr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Expr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ConstExpr) {
		toSerialize["constExpr"] = o.ConstExpr
	}
	if !IsNil(o.IdentExpr) {
		toSerialize["identExpr"] = o.IdentExpr
	}
	if !IsNil(o.SelectExpr) {
		toSerialize["selectExpr"] = o.SelectExpr
	}
	if !IsNil(o.CallExpr) {
		toSerialize["callExpr"] = o.CallExpr
	}
	if !IsNil(o.ListExpr) {
		toSerialize["listExpr"] = o.ListExpr
	}
	if !IsNil(o.StructExpr) {
		toSerialize["structExpr"] = o.StructExpr
	}
	if !IsNil(o.ComprehensionExpr) {
		toSerialize["comprehensionExpr"] = o.ComprehensionExpr
	}
	return toSerialize, nil
}

type NullableExpr struct {
	value *Expr
	isSet bool
}

func (v NullableExpr) Get() *Expr {
	return v.value
}

func (v *NullableExpr) Set(val *Expr) {
	v.value = val
	v.isSet = true
}

func (v NullableExpr) IsSet() bool {
	return v.isSet
}

func (v *NullableExpr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpr(val *Expr) *NullableExpr {
	return &NullableExpr{value: val, isSet: true}
}

func (v NullableExpr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


