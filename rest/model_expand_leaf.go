/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the ExpandLeaf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpandLeaf{}

// ExpandLeaf ExpandLeaf is the leaf node of an Expand tree and can be either a set of Subjects or a set of Values.
type ExpandLeaf struct {
	Subjects *Subjects `json:"subjects,omitempty"`
	Values *Values `json:"values,omitempty"`
	Value *Any `json:"value,omitempty"`
}

// NewExpandLeaf instantiates a new ExpandLeaf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpandLeaf() *ExpandLeaf {
	this := ExpandLeaf{}
	return &this
}

// NewExpandLeafWithDefaults instantiates a new ExpandLeaf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpandLeafWithDefaults() *ExpandLeaf {
	this := ExpandLeaf{}
	return &this
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *ExpandLeaf) GetSubjects() Subjects {
	if o == nil || IsNil(o.Subjects) {
		var ret Subjects
		return ret
	}
	return *o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandLeaf) GetSubjectsOk() (*Subjects, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *ExpandLeaf) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given Subjects and assigns it to the Subjects field.
func (o *ExpandLeaf) SetSubjects(v Subjects) {
	o.Subjects = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ExpandLeaf) GetValues() Values {
	if o == nil || IsNil(o.Values) {
		var ret Values
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandLeaf) GetValuesOk() (*Values, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ExpandLeaf) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given Values and assigns it to the Values field.
func (o *ExpandLeaf) SetValues(v Values) {
	o.Values = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ExpandLeaf) GetValue() Any {
	if o == nil || IsNil(o.Value) {
		var ret Any
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandLeaf) GetValueOk() (*Any, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ExpandLeaf) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given Any and assigns it to the Value field.
func (o *ExpandLeaf) SetValue(v Any) {
	o.Value = &v
}

func (o ExpandLeaf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpandLeaf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableExpandLeaf struct {
	value *ExpandLeaf
	isSet bool
}

func (v NullableExpandLeaf) Get() *ExpandLeaf {
	return v.value
}

func (v *NullableExpandLeaf) Set(val *ExpandLeaf) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandLeaf) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandLeaf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandLeaf(val *ExpandLeaf) *NullableExpandLeaf {
	return &NullableExpandLeaf{value: val, isSet: true}
}

func (v NullableExpandLeaf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandLeaf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


