/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the AttributeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeFilter{}

// AttributeFilter AttributeFilter is used to filter attributes based on the entity and attribute names.
type AttributeFilter struct {
	Entity *EntityFilter `json:"entity,omitempty"`
	Attributes []string `json:"attributes,omitempty"`
}

// NewAttributeFilter instantiates a new AttributeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeFilter() *AttributeFilter {
	this := AttributeFilter{}
	return &this
}

// NewAttributeFilterWithDefaults instantiates a new AttributeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeFilterWithDefaults() *AttributeFilter {
	this := AttributeFilter{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *AttributeFilter) GetEntity() EntityFilter {
	if o == nil || IsNil(o.Entity) {
		var ret EntityFilter
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeFilter) GetEntityOk() (*EntityFilter, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *AttributeFilter) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given EntityFilter and assigns it to the Entity field.
func (o *AttributeFilter) SetEntity(v EntityFilter) {
	o.Entity = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AttributeFilter) GetAttributes() []string {
	if o == nil || IsNil(o.Attributes) {
		var ret []string
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeFilter) GetAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AttributeFilter) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []string and assigns it to the Attributes field.
func (o *AttributeFilter) SetAttributes(v []string) {
	o.Attributes = v
}

func (o AttributeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableAttributeFilter struct {
	value *AttributeFilter
	isSet bool
}

func (v NullableAttributeFilter) Get() *AttributeFilter {
	return v.value
}

func (v *NullableAttributeFilter) Set(val *AttributeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeFilter(val *AttributeFilter) *NullableAttributeFilter {
	return &NullableAttributeFilter{value: val, isSet: true}
}

func (v NullableAttributeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


