/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// AttributeType Enumerates the types of attribute.   - ATTRIBUTE_TYPE_BOOLEAN: A boolean attribute type.  - ATTRIBUTE_TYPE_BOOLEAN_ARRAY: A boolean array attribute type.  - ATTRIBUTE_TYPE_STRING: A string attribute type.  - ATTRIBUTE_TYPE_STRING_ARRAY: A string array attribute type.  - ATTRIBUTE_TYPE_INTEGER: An integer attribute type.  - ATTRIBUTE_TYPE_INTEGER_ARRAY: An integer array attribute type.  - ATTRIBUTE_TYPE_DOUBLE: A double attribute type.  - ATTRIBUTE_TYPE_DOUBLE_ARRAY: A double array attribute type.
type AttributeType string

// List of AttributeType
const (
	ATTRIBUTETYPE_BOOLEAN AttributeType = "ATTRIBUTE_TYPE_BOOLEAN"
	ATTRIBUTETYPE_BOOLEAN_ARRAY AttributeType = "ATTRIBUTE_TYPE_BOOLEAN_ARRAY"
	ATTRIBUTETYPE_STRING AttributeType = "ATTRIBUTE_TYPE_STRING"
	ATTRIBUTETYPE_STRING_ARRAY AttributeType = "ATTRIBUTE_TYPE_STRING_ARRAY"
	ATTRIBUTETYPE_INTEGER AttributeType = "ATTRIBUTE_TYPE_INTEGER"
	ATTRIBUTETYPE_INTEGER_ARRAY AttributeType = "ATTRIBUTE_TYPE_INTEGER_ARRAY"
	ATTRIBUTETYPE_DOUBLE AttributeType = "ATTRIBUTE_TYPE_DOUBLE"
	ATTRIBUTETYPE_DOUBLE_ARRAY AttributeType = "ATTRIBUTE_TYPE_DOUBLE_ARRAY"
)

// All allowed values of AttributeType enum
var AllowedAttributeTypeEnumValues = []AttributeType{
	"ATTRIBUTE_TYPE_BOOLEAN",
	"ATTRIBUTE_TYPE_BOOLEAN_ARRAY",
	"ATTRIBUTE_TYPE_STRING",
	"ATTRIBUTE_TYPE_STRING_ARRAY",
	"ATTRIBUTE_TYPE_INTEGER",
	"ATTRIBUTE_TYPE_INTEGER_ARRAY",
	"ATTRIBUTE_TYPE_DOUBLE",
	"ATTRIBUTE_TYPE_DOUBLE_ARRAY",
}

func (v *AttributeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttributeType(value)
	for _, existing := range AllowedAttributeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttributeType", value)
}

// NewAttributeTypeFromValue returns a pointer to a valid AttributeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttributeTypeFromValue(v string) (*AttributeType, error) {
	ev := AttributeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttributeType: valid values are %v", v, AllowedAttributeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttributeType) IsValid() bool {
	for _, existing := range AllowedAttributeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AttributeType value
func (v AttributeType) Ptr() *AttributeType {
	return &v
}

type NullableAttributeType struct {
	value *AttributeType
	isSet bool
}

func (v NullableAttributeType) Get() *AttributeType {
	return v.value
}

func (v *NullableAttributeType) Set(val *AttributeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeType(val *AttributeType) *NullableAttributeType {
	return &NullableAttributeType{value: val, isSet: true}
}

func (v NullableAttributeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

