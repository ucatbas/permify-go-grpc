/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// ExpandTreeNodeOperation Operation is an enum representing the type of operation to be applied on the tree node.
type ExpandTreeNodeOperation string

// List of ExpandTreeNode.Operation
const (
	EXPANDTREENODEOPERATION_UNION ExpandTreeNodeOperation = "OPERATION_UNION"
	EXPANDTREENODEOPERATION_INTERSECTION ExpandTreeNodeOperation = "OPERATION_INTERSECTION"
	EXPANDTREENODEOPERATION_EXCLUSION ExpandTreeNodeOperation = "OPERATION_EXCLUSION"
)

// All allowed values of ExpandTreeNodeOperation enum
var AllowedExpandTreeNodeOperationEnumValues = []ExpandTreeNodeOperation{
	"OPERATION_UNION",
	"OPERATION_INTERSECTION",
	"OPERATION_EXCLUSION",
}

func (v *ExpandTreeNodeOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpandTreeNodeOperation(value)
	for _, existing := range AllowedExpandTreeNodeOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpandTreeNodeOperation", value)
}

// NewExpandTreeNodeOperationFromValue returns a pointer to a valid ExpandTreeNodeOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpandTreeNodeOperationFromValue(v string) (*ExpandTreeNodeOperation, error) {
	ev := ExpandTreeNodeOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpandTreeNodeOperation: valid values are %v", v, AllowedExpandTreeNodeOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpandTreeNodeOperation) IsValid() bool {
	for _, existing := range AllowedExpandTreeNodeOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpandTreeNode.Operation value
func (v ExpandTreeNodeOperation) Ptr() *ExpandTreeNodeOperation {
	return &v
}

type NullableExpandTreeNodeOperation struct {
	value *ExpandTreeNodeOperation
	isSet bool
}

func (v NullableExpandTreeNodeOperation) Get() *ExpandTreeNodeOperation {
	return v.value
}

func (v *NullableExpandTreeNodeOperation) Set(val *ExpandTreeNodeOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandTreeNodeOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandTreeNodeOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandTreeNodeOperation(val *ExpandTreeNodeOperation) *NullableExpandTreeNodeOperation {
	return &NullableExpandTreeNodeOperation{value: val, isSet: true}
}

func (v NullableExpandTreeNodeOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandTreeNodeOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

