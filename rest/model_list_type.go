/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the ListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListType{}

// ListType List type with typed elements, e.g. `list<example.proto.MyMessage>`.
type ListType struct {
	ElemType *V1alpha1Type `json:"elemType,omitempty"`
}

// NewListType instantiates a new ListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListType() *ListType {
	this := ListType{}
	return &this
}

// NewListTypeWithDefaults instantiates a new ListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTypeWithDefaults() *ListType {
	this := ListType{}
	return &this
}

// GetElemType returns the ElemType field value if set, zero value otherwise.
func (o *ListType) GetElemType() V1alpha1Type {
	if o == nil || IsNil(o.ElemType) {
		var ret V1alpha1Type
		return ret
	}
	return *o.ElemType
}

// GetElemTypeOk returns a tuple with the ElemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListType) GetElemTypeOk() (*V1alpha1Type, bool) {
	if o == nil || IsNil(o.ElemType) {
		return nil, false
	}
	return o.ElemType, true
}

// HasElemType returns a boolean if a field has been set.
func (o *ListType) HasElemType() bool {
	if o != nil && !IsNil(o.ElemType) {
		return true
	}

	return false
}

// SetElemType gets a reference to the given V1alpha1Type and assigns it to the ElemType field.
func (o *ListType) SetElemType(v V1alpha1Type) {
	o.ElemType = &v
}

func (o ListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ElemType) {
		toSerialize["elemType"] = o.ElemType
	}
	return toSerialize, nil
}

type NullableListType struct {
	value *ListType
	isSet bool
}

func (v NullableListType) Get() *ListType {
	return v.value
}

func (v *NullableListType) Set(val *ListType) {
	v.value = val
	v.isSet = true
}

func (v NullableListType) IsSet() bool {
	return v.isSet
}

func (v *NullableListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListType(val *ListType) *NullableListType {
	return &NullableListType{value: val, isSet: true}
}

func (v NullableListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


