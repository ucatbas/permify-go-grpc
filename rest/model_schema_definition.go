/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the SchemaDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaDefinition{}

// SchemaDefinition The SchemaDefinition message provides definitions for entities and rules, and includes references to clarify whether a name refers to an entity or a rule.
type SchemaDefinition struct {
	// Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
	EntityDefinitions *map[string]EntityDefinition `json:"entityDefinitions,omitempty"`
	// Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
	RuleDefinitions *map[string]RuleDefinition `json:"ruleDefinitions,omitempty"`
	// Map of references to signify whether a string refers to an entity or a rule.
	References *map[string]SchemaDefinitionReference `json:"references,omitempty"`
}

// NewSchemaDefinition instantiates a new SchemaDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDefinition() *SchemaDefinition {
	this := SchemaDefinition{}
	return &this
}

// NewSchemaDefinitionWithDefaults instantiates a new SchemaDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDefinitionWithDefaults() *SchemaDefinition {
	this := SchemaDefinition{}
	return &this
}

// GetEntityDefinitions returns the EntityDefinitions field value if set, zero value otherwise.
func (o *SchemaDefinition) GetEntityDefinitions() map[string]EntityDefinition {
	if o == nil || IsNil(o.EntityDefinitions) {
		var ret map[string]EntityDefinition
		return ret
	}
	return *o.EntityDefinitions
}

// GetEntityDefinitionsOk returns a tuple with the EntityDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinition) GetEntityDefinitionsOk() (*map[string]EntityDefinition, bool) {
	if o == nil || IsNil(o.EntityDefinitions) {
		return nil, false
	}
	return o.EntityDefinitions, true
}

// HasEntityDefinitions returns a boolean if a field has been set.
func (o *SchemaDefinition) HasEntityDefinitions() bool {
	if o != nil && !IsNil(o.EntityDefinitions) {
		return true
	}

	return false
}

// SetEntityDefinitions gets a reference to the given map[string]EntityDefinition and assigns it to the EntityDefinitions field.
func (o *SchemaDefinition) SetEntityDefinitions(v map[string]EntityDefinition) {
	o.EntityDefinitions = &v
}

// GetRuleDefinitions returns the RuleDefinitions field value if set, zero value otherwise.
func (o *SchemaDefinition) GetRuleDefinitions() map[string]RuleDefinition {
	if o == nil || IsNil(o.RuleDefinitions) {
		var ret map[string]RuleDefinition
		return ret
	}
	return *o.RuleDefinitions
}

// GetRuleDefinitionsOk returns a tuple with the RuleDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinition) GetRuleDefinitionsOk() (*map[string]RuleDefinition, bool) {
	if o == nil || IsNil(o.RuleDefinitions) {
		return nil, false
	}
	return o.RuleDefinitions, true
}

// HasRuleDefinitions returns a boolean if a field has been set.
func (o *SchemaDefinition) HasRuleDefinitions() bool {
	if o != nil && !IsNil(o.RuleDefinitions) {
		return true
	}

	return false
}

// SetRuleDefinitions gets a reference to the given map[string]RuleDefinition and assigns it to the RuleDefinitions field.
func (o *SchemaDefinition) SetRuleDefinitions(v map[string]RuleDefinition) {
	o.RuleDefinitions = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *SchemaDefinition) GetReferences() map[string]SchemaDefinitionReference {
	if o == nil || IsNil(o.References) {
		var ret map[string]SchemaDefinitionReference
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinition) GetReferencesOk() (*map[string]SchemaDefinitionReference, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *SchemaDefinition) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given map[string]SchemaDefinitionReference and assigns it to the References field.
func (o *SchemaDefinition) SetReferences(v map[string]SchemaDefinitionReference) {
	o.References = &v
}

func (o SchemaDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityDefinitions) {
		toSerialize["entityDefinitions"] = o.EntityDefinitions
	}
	if !IsNil(o.RuleDefinitions) {
		toSerialize["ruleDefinitions"] = o.RuleDefinitions
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	return toSerialize, nil
}

type NullableSchemaDefinition struct {
	value *SchemaDefinition
	isSet bool
}

func (v NullableSchemaDefinition) Get() *SchemaDefinition {
	return v.value
}

func (v *NullableSchemaDefinition) Set(val *SchemaDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDefinition(val *SchemaDefinition) *NullableSchemaDefinition {
	return &NullableSchemaDefinition{value: val, isSet: true}
}

func (v NullableSchemaDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


