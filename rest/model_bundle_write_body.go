/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the BundleWriteBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleWriteBody{}

// BundleWriteBody BundleWriteRequest is used to request the writing of a bundle. It contains the tenant_id to identify the tenant and the Bundles object.
type BundleWriteBody struct {
	// Contains the bundle data to be written.
	Bundles []DataBundle `json:"bundles,omitempty"`
}

// NewBundleWriteBody instantiates a new BundleWriteBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleWriteBody() *BundleWriteBody {
	this := BundleWriteBody{}
	return &this
}

// NewBundleWriteBodyWithDefaults instantiates a new BundleWriteBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleWriteBodyWithDefaults() *BundleWriteBody {
	this := BundleWriteBody{}
	return &this
}

// GetBundles returns the Bundles field value if set, zero value otherwise.
func (o *BundleWriteBody) GetBundles() []DataBundle {
	if o == nil || IsNil(o.Bundles) {
		var ret []DataBundle
		return ret
	}
	return o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleWriteBody) GetBundlesOk() ([]DataBundle, bool) {
	if o == nil || IsNil(o.Bundles) {
		return nil, false
	}
	return o.Bundles, true
}

// HasBundles returns a boolean if a field has been set.
func (o *BundleWriteBody) HasBundles() bool {
	if o != nil && !IsNil(o.Bundles) {
		return true
	}

	return false
}

// SetBundles gets a reference to the given []DataBundle and assigns it to the Bundles field.
func (o *BundleWriteBody) SetBundles(v []DataBundle) {
	o.Bundles = v
}

func (o BundleWriteBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleWriteBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bundles) {
		toSerialize["bundles"] = o.Bundles
	}
	return toSerialize, nil
}

type NullableBundleWriteBody struct {
	value *BundleWriteBody
	isSet bool
}

func (v NullableBundleWriteBody) Get() *BundleWriteBody {
	return v.value
}

func (v *NullableBundleWriteBody) Set(val *BundleWriteBody) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleWriteBody) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleWriteBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleWriteBody(val *BundleWriteBody) *NullableBundleWriteBody {
	return &NullableBundleWriteBody{value: val, isSet: true}
}

func (v NullableBundleWriteBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleWriteBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


