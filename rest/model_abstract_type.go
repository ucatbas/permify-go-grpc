/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the AbstractType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractType{}

// AbstractType Application defined abstract type.
type AbstractType struct {
	// The fully qualified name of this abstract type.
	Name *string `json:"name,omitempty"`
	// Parameter types for this abstract type.
	ParameterTypes []V1alpha1Type `json:"parameterTypes,omitempty"`
}

// NewAbstractType instantiates a new AbstractType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractType() *AbstractType {
	this := AbstractType{}
	return &this
}

// NewAbstractTypeWithDefaults instantiates a new AbstractType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractTypeWithDefaults() *AbstractType {
	this := AbstractType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AbstractType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AbstractType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AbstractType) SetName(v string) {
	o.Name = &v
}

// GetParameterTypes returns the ParameterTypes field value if set, zero value otherwise.
func (o *AbstractType) GetParameterTypes() []V1alpha1Type {
	if o == nil || IsNil(o.ParameterTypes) {
		var ret []V1alpha1Type
		return ret
	}
	return o.ParameterTypes
}

// GetParameterTypesOk returns a tuple with the ParameterTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractType) GetParameterTypesOk() ([]V1alpha1Type, bool) {
	if o == nil || IsNil(o.ParameterTypes) {
		return nil, false
	}
	return o.ParameterTypes, true
}

// HasParameterTypes returns a boolean if a field has been set.
func (o *AbstractType) HasParameterTypes() bool {
	if o != nil && !IsNil(o.ParameterTypes) {
		return true
	}

	return false
}

// SetParameterTypes gets a reference to the given []V1alpha1Type and assigns it to the ParameterTypes field.
func (o *AbstractType) SetParameterTypes(v []V1alpha1Type) {
	o.ParameterTypes = v
}

func (o AbstractType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParameterTypes) {
		toSerialize["parameterTypes"] = o.ParameterTypes
	}
	return toSerialize, nil
}

type NullableAbstractType struct {
	value *AbstractType
	isSet bool
}

func (v NullableAbstractType) Get() *AbstractType {
	return v.value
}

func (v *NullableAbstractType) Set(val *AbstractType) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractType) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractType(val *AbstractType) *NullableAbstractType {
	return &NullableAbstractType{value: val, isSet: true}
}

func (v NullableAbstractType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


