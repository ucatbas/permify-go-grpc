/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the FunctionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionType{}

// FunctionType Function type with result and arg types.
type FunctionType struct {
	ResultType *V1alpha1Type `json:"resultType,omitempty"`
	// Argument types of the function.
	ArgTypes []V1alpha1Type `json:"argTypes,omitempty"`
}

// NewFunctionType instantiates a new FunctionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionType() *FunctionType {
	this := FunctionType{}
	return &this
}

// NewFunctionTypeWithDefaults instantiates a new FunctionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionTypeWithDefaults() *FunctionType {
	this := FunctionType{}
	return &this
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *FunctionType) GetResultType() V1alpha1Type {
	if o == nil || IsNil(o.ResultType) {
		var ret V1alpha1Type
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionType) GetResultTypeOk() (*V1alpha1Type, bool) {
	if o == nil || IsNil(o.ResultType) {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *FunctionType) HasResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given V1alpha1Type and assigns it to the ResultType field.
func (o *FunctionType) SetResultType(v V1alpha1Type) {
	o.ResultType = &v
}

// GetArgTypes returns the ArgTypes field value if set, zero value otherwise.
func (o *FunctionType) GetArgTypes() []V1alpha1Type {
	if o == nil || IsNil(o.ArgTypes) {
		var ret []V1alpha1Type
		return ret
	}
	return o.ArgTypes
}

// GetArgTypesOk returns a tuple with the ArgTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionType) GetArgTypesOk() ([]V1alpha1Type, bool) {
	if o == nil || IsNil(o.ArgTypes) {
		return nil, false
	}
	return o.ArgTypes, true
}

// HasArgTypes returns a boolean if a field has been set.
func (o *FunctionType) HasArgTypes() bool {
	if o != nil && !IsNil(o.ArgTypes) {
		return true
	}

	return false
}

// SetArgTypes gets a reference to the given []V1alpha1Type and assigns it to the ArgTypes field.
func (o *FunctionType) SetArgTypes(v []V1alpha1Type) {
	o.ArgTypes = v
}

func (o FunctionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResultType) {
		toSerialize["resultType"] = o.ResultType
	}
	if !IsNil(o.ArgTypes) {
		toSerialize["argTypes"] = o.ArgTypes
	}
	return toSerialize, nil
}

type NullableFunctionType struct {
	value *FunctionType
	isSet bool
}

func (v NullableFunctionType) Get() *FunctionType {
	return v.value
}

func (v *NullableFunctionType) Set(val *FunctionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionType(val *FunctionType) *NullableFunctionType {
	return &NullableFunctionType{value: val, isSet: true}
}

func (v NullableFunctionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


