/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Rewrite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rewrite{}

// Rewrite The Rewrite message represents a specific rewrite operation. This operation could be one of the following: union, intersection, or exclusion.
type Rewrite struct {
	RewriteOperation *RewriteOperation `json:"rewriteOperation,omitempty"`
	// A list of children that are operated upon by the rewrite operation.
	Children []Child `json:"children,omitempty"`
}

// NewRewrite instantiates a new Rewrite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewrite() *Rewrite {
	this := Rewrite{}
	return &this
}

// NewRewriteWithDefaults instantiates a new Rewrite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewriteWithDefaults() *Rewrite {
	this := Rewrite{}
	return &this
}

// GetRewriteOperation returns the RewriteOperation field value if set, zero value otherwise.
func (o *Rewrite) GetRewriteOperation() RewriteOperation {
	if o == nil || IsNil(o.RewriteOperation) {
		var ret RewriteOperation
		return ret
	}
	return *o.RewriteOperation
}

// GetRewriteOperationOk returns a tuple with the RewriteOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rewrite) GetRewriteOperationOk() (*RewriteOperation, bool) {
	if o == nil || IsNil(o.RewriteOperation) {
		return nil, false
	}
	return o.RewriteOperation, true
}

// HasRewriteOperation returns a boolean if a field has been set.
func (o *Rewrite) HasRewriteOperation() bool {
	if o != nil && !IsNil(o.RewriteOperation) {
		return true
	}

	return false
}

// SetRewriteOperation gets a reference to the given RewriteOperation and assigns it to the RewriteOperation field.
func (o *Rewrite) SetRewriteOperation(v RewriteOperation) {
	o.RewriteOperation = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Rewrite) GetChildren() []Child {
	if o == nil || IsNil(o.Children) {
		var ret []Child
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rewrite) GetChildrenOk() ([]Child, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Rewrite) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Child and assigns it to the Children field.
func (o *Rewrite) SetChildren(v []Child) {
	o.Children = v
}

func (o Rewrite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rewrite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RewriteOperation) {
		toSerialize["rewriteOperation"] = o.RewriteOperation
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableRewrite struct {
	value *Rewrite
	isSet bool
}

func (v NullableRewrite) Get() *Rewrite {
	return v.value
}

func (v *NullableRewrite) Set(val *Rewrite) {
	v.value = val
	v.isSet = true
}

func (v NullableRewrite) IsSet() bool {
	return v.isSet
}

func (v *NullableRewrite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewrite(val *Rewrite) *NullableRewrite {
	return &NullableRewrite{value: val, isSet: true}
}

func (v NullableRewrite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewrite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


