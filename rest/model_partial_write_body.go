/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the PartialWriteBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialWriteBody{}

// PartialWriteBody struct for PartialWriteBody
type PartialWriteBody struct {
	Metadata *SchemaPartialWriteRequestMetadata `json:"metadata,omitempty"`
	Partials *map[string]Partials `json:"partials,omitempty"`
}

// NewPartialWriteBody instantiates a new PartialWriteBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialWriteBody() *PartialWriteBody {
	this := PartialWriteBody{}
	return &this
}

// NewPartialWriteBodyWithDefaults instantiates a new PartialWriteBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialWriteBodyWithDefaults() *PartialWriteBody {
	this := PartialWriteBody{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PartialWriteBody) GetMetadata() SchemaPartialWriteRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret SchemaPartialWriteRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialWriteBody) GetMetadataOk() (*SchemaPartialWriteRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PartialWriteBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SchemaPartialWriteRequestMetadata and assigns it to the Metadata field.
func (o *PartialWriteBody) SetMetadata(v SchemaPartialWriteRequestMetadata) {
	o.Metadata = &v
}

// GetPartials returns the Partials field value if set, zero value otherwise.
func (o *PartialWriteBody) GetPartials() map[string]Partials {
	if o == nil || IsNil(o.Partials) {
		var ret map[string]Partials
		return ret
	}
	return *o.Partials
}

// GetPartialsOk returns a tuple with the Partials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialWriteBody) GetPartialsOk() (*map[string]Partials, bool) {
	if o == nil || IsNil(o.Partials) {
		return nil, false
	}
	return o.Partials, true
}

// HasPartials returns a boolean if a field has been set.
func (o *PartialWriteBody) HasPartials() bool {
	if o != nil && !IsNil(o.Partials) {
		return true
	}

	return false
}

// SetPartials gets a reference to the given map[string]Partials and assigns it to the Partials field.
func (o *PartialWriteBody) SetPartials(v map[string]Partials) {
	o.Partials = &v
}

func (o PartialWriteBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartialWriteBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Partials) {
		toSerialize["partials"] = o.Partials
	}
	return toSerialize, nil
}

type NullablePartialWriteBody struct {
	value *PartialWriteBody
	isSet bool
}

func (v NullablePartialWriteBody) Get() *PartialWriteBody {
	return v.value
}

func (v *NullablePartialWriteBody) Set(val *PartialWriteBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialWriteBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialWriteBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialWriteBody(val *PartialWriteBody) *NullablePartialWriteBody {
	return &NullablePartialWriteBody{value: val, isSet: true}
}

func (v NullablePartialWriteBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialWriteBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


