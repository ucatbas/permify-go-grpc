/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Entry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entry{}

// Entry Represents an entry.
type Entry struct {
	// Required. An id assigned to this node by the parser which is unique in a given expression tree. This is used to associate type information and other attributes to the node.
	Id *string `json:"id,omitempty"`
	// The field key for a message creator statement.
	FieldKey *string `json:"fieldKey,omitempty"`
	MapKey *Expr `json:"mapKey,omitempty"`
	Value *Expr `json:"value,omitempty"`
	// Whether the key-value pair is optional.
	OptionalEntry *bool `json:"optionalEntry,omitempty"`
}

// NewEntry instantiates a new Entry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntry() *Entry {
	this := Entry{}
	return &this
}

// NewEntryWithDefaults instantiates a new Entry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryWithDefaults() *Entry {
	this := Entry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Entry) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Entry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Entry) SetId(v string) {
	o.Id = &v
}

// GetFieldKey returns the FieldKey field value if set, zero value otherwise.
func (o *Entry) GetFieldKey() string {
	if o == nil || IsNil(o.FieldKey) {
		var ret string
		return ret
	}
	return *o.FieldKey
}

// GetFieldKeyOk returns a tuple with the FieldKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFieldKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FieldKey) {
		return nil, false
	}
	return o.FieldKey, true
}

// HasFieldKey returns a boolean if a field has been set.
func (o *Entry) HasFieldKey() bool {
	if o != nil && !IsNil(o.FieldKey) {
		return true
	}

	return false
}

// SetFieldKey gets a reference to the given string and assigns it to the FieldKey field.
func (o *Entry) SetFieldKey(v string) {
	o.FieldKey = &v
}

// GetMapKey returns the MapKey field value if set, zero value otherwise.
func (o *Entry) GetMapKey() Expr {
	if o == nil || IsNil(o.MapKey) {
		var ret Expr
		return ret
	}
	return *o.MapKey
}

// GetMapKeyOk returns a tuple with the MapKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetMapKeyOk() (*Expr, bool) {
	if o == nil || IsNil(o.MapKey) {
		return nil, false
	}
	return o.MapKey, true
}

// HasMapKey returns a boolean if a field has been set.
func (o *Entry) HasMapKey() bool {
	if o != nil && !IsNil(o.MapKey) {
		return true
	}

	return false
}

// SetMapKey gets a reference to the given Expr and assigns it to the MapKey field.
func (o *Entry) SetMapKey(v Expr) {
	o.MapKey = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Entry) GetValue() Expr {
	if o == nil || IsNil(o.Value) {
		var ret Expr
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetValueOk() (*Expr, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Entry) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given Expr and assigns it to the Value field.
func (o *Entry) SetValue(v Expr) {
	o.Value = &v
}

// GetOptionalEntry returns the OptionalEntry field value if set, zero value otherwise.
func (o *Entry) GetOptionalEntry() bool {
	if o == nil || IsNil(o.OptionalEntry) {
		var ret bool
		return ret
	}
	return *o.OptionalEntry
}

// GetOptionalEntryOk returns a tuple with the OptionalEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetOptionalEntryOk() (*bool, bool) {
	if o == nil || IsNil(o.OptionalEntry) {
		return nil, false
	}
	return o.OptionalEntry, true
}

// HasOptionalEntry returns a boolean if a field has been set.
func (o *Entry) HasOptionalEntry() bool {
	if o != nil && !IsNil(o.OptionalEntry) {
		return true
	}

	return false
}

// SetOptionalEntry gets a reference to the given bool and assigns it to the OptionalEntry field.
func (o *Entry) SetOptionalEntry(v bool) {
	o.OptionalEntry = &v
}

func (o Entry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FieldKey) {
		toSerialize["fieldKey"] = o.FieldKey
	}
	if !IsNil(o.MapKey) {
		toSerialize["mapKey"] = o.MapKey
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.OptionalEntry) {
		toSerialize["optionalEntry"] = o.OptionalEntry
	}
	return toSerialize, nil
}

type NullableEntry struct {
	value *Entry
	isSet bool
}

func (v NullableEntry) Get() *Entry {
	return v.value
}

func (v *NullableEntry) Set(val *Entry) {
	v.value = val
	v.isSet = true
}

func (v NullableEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntry(val *Entry) *NullableEntry {
	return &NullableEntry{value: val, isSet: true}
}

func (v NullableEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


