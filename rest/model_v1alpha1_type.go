/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the V1alpha1Type type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1Type{}

// V1alpha1Type Represents a CEL type.
type V1alpha1Type struct {
	// Dynamic type.
	Dyn map[string]interface{} `json:"dyn,omitempty"`
	// Null value.
	Null *string `json:"null,omitempty"`
	Primitive *PrimitiveType `json:"primitive,omitempty"`
	Wrapper *PrimitiveType `json:"wrapper,omitempty"`
	WellKnown *WellKnownType `json:"wellKnown,omitempty"`
	ListType *ListType `json:"listType,omitempty"`
	MapType *MapType `json:"mapType,omitempty"`
	Function *FunctionType `json:"function,omitempty"`
	// Protocol buffer message type.  The `message_type` string specifies the qualified message type name. For example, `google.plus.Profile`.
	MessageType *string `json:"messageType,omitempty"`
	// Type param type.  The `type_param` string specifies the type parameter name, e.g. `list<E>` would be a `list_type` whose element type was a `type_param` type named `E`.
	TypeParam *string `json:"typeParam,omitempty"`
	Type *V1alpha1Type `json:"type,omitempty"`
	// Error type.  During type-checking if an expression is an error, its type is propagated as the `ERROR` type. This permits the type-checker to discover other errors present in the expression.
	Error map[string]interface{} `json:"error,omitempty"`
	AbstractType *AbstractType `json:"abstractType,omitempty"`
}

// NewV1alpha1Type instantiates a new V1alpha1Type object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1Type() *V1alpha1Type {
	this := V1alpha1Type{}
	return &this
}

// NewV1alpha1TypeWithDefaults instantiates a new V1alpha1Type object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1TypeWithDefaults() *V1alpha1Type {
	this := V1alpha1Type{}
	return &this
}

// GetDyn returns the Dyn field value if set, zero value otherwise.
func (o *V1alpha1Type) GetDyn() map[string]interface{} {
	if o == nil || IsNil(o.Dyn) {
		var ret map[string]interface{}
		return ret
	}
	return o.Dyn
}

// GetDynOk returns a tuple with the Dyn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetDynOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dyn) {
		return map[string]interface{}{}, false
	}
	return o.Dyn, true
}

// HasDyn returns a boolean if a field has been set.
func (o *V1alpha1Type) HasDyn() bool {
	if o != nil && !IsNil(o.Dyn) {
		return true
	}

	return false
}

// SetDyn gets a reference to the given map[string]interface{} and assigns it to the Dyn field.
func (o *V1alpha1Type) SetDyn(v map[string]interface{}) {
	o.Dyn = v
}

// GetNull returns the Null field value if set, zero value otherwise.
func (o *V1alpha1Type) GetNull() string {
	if o == nil || IsNil(o.Null) {
		var ret string
		return ret
	}
	return *o.Null
}

// GetNullOk returns a tuple with the Null field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetNullOk() (*string, bool) {
	if o == nil || IsNil(o.Null) {
		return nil, false
	}
	return o.Null, true
}

// HasNull returns a boolean if a field has been set.
func (o *V1alpha1Type) HasNull() bool {
	if o != nil && !IsNil(o.Null) {
		return true
	}

	return false
}

// SetNull gets a reference to the given string and assigns it to the Null field.
func (o *V1alpha1Type) SetNull(v string) {
	o.Null = &v
}

// GetPrimitive returns the Primitive field value if set, zero value otherwise.
func (o *V1alpha1Type) GetPrimitive() PrimitiveType {
	if o == nil || IsNil(o.Primitive) {
		var ret PrimitiveType
		return ret
	}
	return *o.Primitive
}

// GetPrimitiveOk returns a tuple with the Primitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetPrimitiveOk() (*PrimitiveType, bool) {
	if o == nil || IsNil(o.Primitive) {
		return nil, false
	}
	return o.Primitive, true
}

// HasPrimitive returns a boolean if a field has been set.
func (o *V1alpha1Type) HasPrimitive() bool {
	if o != nil && !IsNil(o.Primitive) {
		return true
	}

	return false
}

// SetPrimitive gets a reference to the given PrimitiveType and assigns it to the Primitive field.
func (o *V1alpha1Type) SetPrimitive(v PrimitiveType) {
	o.Primitive = &v
}

// GetWrapper returns the Wrapper field value if set, zero value otherwise.
func (o *V1alpha1Type) GetWrapper() PrimitiveType {
	if o == nil || IsNil(o.Wrapper) {
		var ret PrimitiveType
		return ret
	}
	return *o.Wrapper
}

// GetWrapperOk returns a tuple with the Wrapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetWrapperOk() (*PrimitiveType, bool) {
	if o == nil || IsNil(o.Wrapper) {
		return nil, false
	}
	return o.Wrapper, true
}

// HasWrapper returns a boolean if a field has been set.
func (o *V1alpha1Type) HasWrapper() bool {
	if o != nil && !IsNil(o.Wrapper) {
		return true
	}

	return false
}

// SetWrapper gets a reference to the given PrimitiveType and assigns it to the Wrapper field.
func (o *V1alpha1Type) SetWrapper(v PrimitiveType) {
	o.Wrapper = &v
}

// GetWellKnown returns the WellKnown field value if set, zero value otherwise.
func (o *V1alpha1Type) GetWellKnown() WellKnownType {
	if o == nil || IsNil(o.WellKnown) {
		var ret WellKnownType
		return ret
	}
	return *o.WellKnown
}

// GetWellKnownOk returns a tuple with the WellKnown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetWellKnownOk() (*WellKnownType, bool) {
	if o == nil || IsNil(o.WellKnown) {
		return nil, false
	}
	return o.WellKnown, true
}

// HasWellKnown returns a boolean if a field has been set.
func (o *V1alpha1Type) HasWellKnown() bool {
	if o != nil && !IsNil(o.WellKnown) {
		return true
	}

	return false
}

// SetWellKnown gets a reference to the given WellKnownType and assigns it to the WellKnown field.
func (o *V1alpha1Type) SetWellKnown(v WellKnownType) {
	o.WellKnown = &v
}

// GetListType returns the ListType field value if set, zero value otherwise.
func (o *V1alpha1Type) GetListType() ListType {
	if o == nil || IsNil(o.ListType) {
		var ret ListType
		return ret
	}
	return *o.ListType
}

// GetListTypeOk returns a tuple with the ListType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetListTypeOk() (*ListType, bool) {
	if o == nil || IsNil(o.ListType) {
		return nil, false
	}
	return o.ListType, true
}

// HasListType returns a boolean if a field has been set.
func (o *V1alpha1Type) HasListType() bool {
	if o != nil && !IsNil(o.ListType) {
		return true
	}

	return false
}

// SetListType gets a reference to the given ListType and assigns it to the ListType field.
func (o *V1alpha1Type) SetListType(v ListType) {
	o.ListType = &v
}

// GetMapType returns the MapType field value if set, zero value otherwise.
func (o *V1alpha1Type) GetMapType() MapType {
	if o == nil || IsNil(o.MapType) {
		var ret MapType
		return ret
	}
	return *o.MapType
}

// GetMapTypeOk returns a tuple with the MapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetMapTypeOk() (*MapType, bool) {
	if o == nil || IsNil(o.MapType) {
		return nil, false
	}
	return o.MapType, true
}

// HasMapType returns a boolean if a field has been set.
func (o *V1alpha1Type) HasMapType() bool {
	if o != nil && !IsNil(o.MapType) {
		return true
	}

	return false
}

// SetMapType gets a reference to the given MapType and assigns it to the MapType field.
func (o *V1alpha1Type) SetMapType(v MapType) {
	o.MapType = &v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *V1alpha1Type) GetFunction() FunctionType {
	if o == nil || IsNil(o.Function) {
		var ret FunctionType
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetFunctionOk() (*FunctionType, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *V1alpha1Type) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given FunctionType and assigns it to the Function field.
func (o *V1alpha1Type) SetFunction(v FunctionType) {
	o.Function = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *V1alpha1Type) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *V1alpha1Type) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *V1alpha1Type) SetMessageType(v string) {
	o.MessageType = &v
}

// GetTypeParam returns the TypeParam field value if set, zero value otherwise.
func (o *V1alpha1Type) GetTypeParam() string {
	if o == nil || IsNil(o.TypeParam) {
		var ret string
		return ret
	}
	return *o.TypeParam
}

// GetTypeParamOk returns a tuple with the TypeParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetTypeParamOk() (*string, bool) {
	if o == nil || IsNil(o.TypeParam) {
		return nil, false
	}
	return o.TypeParam, true
}

// HasTypeParam returns a boolean if a field has been set.
func (o *V1alpha1Type) HasTypeParam() bool {
	if o != nil && !IsNil(o.TypeParam) {
		return true
	}

	return false
}

// SetTypeParam gets a reference to the given string and assigns it to the TypeParam field.
func (o *V1alpha1Type) SetTypeParam(v string) {
	o.TypeParam = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1alpha1Type) GetType() V1alpha1Type {
	if o == nil || IsNil(o.Type) {
		var ret V1alpha1Type
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetTypeOk() (*V1alpha1Type, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1alpha1Type) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given V1alpha1Type and assigns it to the Type field.
func (o *V1alpha1Type) SetType(v V1alpha1Type) {
	o.Type = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *V1alpha1Type) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *V1alpha1Type) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *V1alpha1Type) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetAbstractType returns the AbstractType field value if set, zero value otherwise.
func (o *V1alpha1Type) GetAbstractType() AbstractType {
	if o == nil || IsNil(o.AbstractType) {
		var ret AbstractType
		return ret
	}
	return *o.AbstractType
}

// GetAbstractTypeOk returns a tuple with the AbstractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Type) GetAbstractTypeOk() (*AbstractType, bool) {
	if o == nil || IsNil(o.AbstractType) {
		return nil, false
	}
	return o.AbstractType, true
}

// HasAbstractType returns a boolean if a field has been set.
func (o *V1alpha1Type) HasAbstractType() bool {
	if o != nil && !IsNil(o.AbstractType) {
		return true
	}

	return false
}

// SetAbstractType gets a reference to the given AbstractType and assigns it to the AbstractType field.
func (o *V1alpha1Type) SetAbstractType(v AbstractType) {
	o.AbstractType = &v
}

func (o V1alpha1Type) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1Type) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dyn) {
		toSerialize["dyn"] = o.Dyn
	}
	if !IsNil(o.Null) {
		toSerialize["null"] = o.Null
	}
	if !IsNil(o.Primitive) {
		toSerialize["primitive"] = o.Primitive
	}
	if !IsNil(o.Wrapper) {
		toSerialize["wrapper"] = o.Wrapper
	}
	if !IsNil(o.WellKnown) {
		toSerialize["wellKnown"] = o.WellKnown
	}
	if !IsNil(o.ListType) {
		toSerialize["listType"] = o.ListType
	}
	if !IsNil(o.MapType) {
		toSerialize["mapType"] = o.MapType
	}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	if !IsNil(o.MessageType) {
		toSerialize["messageType"] = o.MessageType
	}
	if !IsNil(o.TypeParam) {
		toSerialize["typeParam"] = o.TypeParam
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.AbstractType) {
		toSerialize["abstractType"] = o.AbstractType
	}
	return toSerialize, nil
}

type NullableV1alpha1Type struct {
	value *V1alpha1Type
	isSet bool
}

func (v NullableV1alpha1Type) Get() *V1alpha1Type {
	return v.value
}

func (v *NullableV1alpha1Type) Set(val *V1alpha1Type) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1Type) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1Type) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1Type(val *V1alpha1Type) *NullableV1alpha1Type {
	return &NullableV1alpha1Type{value: val, isSet: true}
}

func (v NullableV1alpha1Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1Type) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


