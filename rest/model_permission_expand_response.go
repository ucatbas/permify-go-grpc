/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the PermissionExpandResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionExpandResponse{}

// PermissionExpandResponse PermissionExpandResponse is the response message for the Expand method in the Permission service.
type PermissionExpandResponse struct {
	Tree *V1Expand `json:"tree,omitempty"`
}

// NewPermissionExpandResponse instantiates a new PermissionExpandResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionExpandResponse() *PermissionExpandResponse {
	this := PermissionExpandResponse{}
	return &this
}

// NewPermissionExpandResponseWithDefaults instantiates a new PermissionExpandResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionExpandResponseWithDefaults() *PermissionExpandResponse {
	this := PermissionExpandResponse{}
	return &this
}

// GetTree returns the Tree field value if set, zero value otherwise.
func (o *PermissionExpandResponse) GetTree() V1Expand {
	if o == nil || IsNil(o.Tree) {
		var ret V1Expand
		return ret
	}
	return *o.Tree
}

// GetTreeOk returns a tuple with the Tree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionExpandResponse) GetTreeOk() (*V1Expand, bool) {
	if o == nil || IsNil(o.Tree) {
		return nil, false
	}
	return o.Tree, true
}

// HasTree returns a boolean if a field has been set.
func (o *PermissionExpandResponse) HasTree() bool {
	if o != nil && !IsNil(o.Tree) {
		return true
	}

	return false
}

// SetTree gets a reference to the given V1Expand and assigns it to the Tree field.
func (o *PermissionExpandResponse) SetTree(v V1Expand) {
	o.Tree = &v
}

func (o PermissionExpandResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionExpandResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tree) {
		toSerialize["tree"] = o.Tree
	}
	return toSerialize, nil
}

type NullablePermissionExpandResponse struct {
	value *PermissionExpandResponse
	isSet bool
}

func (v NullablePermissionExpandResponse) Get() *PermissionExpandResponse {
	return v.value
}

func (v *NullablePermissionExpandResponse) Set(val *PermissionExpandResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionExpandResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionExpandResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionExpandResponse(val *PermissionExpandResponse) *NullablePermissionExpandResponse {
	return &NullablePermissionExpandResponse{value: val, isSet: true}
}

func (v NullablePermissionExpandResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionExpandResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


