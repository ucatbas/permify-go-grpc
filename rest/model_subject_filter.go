/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the SubjectFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubjectFilter{}

// SubjectFilter SubjectFilter is used to filter subjects based on the type, ids and relation.
type SubjectFilter struct {
	Type *string `json:"type,omitempty"`
	Ids []string `json:"ids,omitempty"`
	Relation *string `json:"relation,omitempty"`
}

// NewSubjectFilter instantiates a new SubjectFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectFilter() *SubjectFilter {
	this := SubjectFilter{}
	return &this
}

// NewSubjectFilterWithDefaults instantiates a new SubjectFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectFilterWithDefaults() *SubjectFilter {
	this := SubjectFilter{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubjectFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubjectFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubjectFilter) SetType(v string) {
	o.Type = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *SubjectFilter) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectFilter) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *SubjectFilter) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *SubjectFilter) SetIds(v []string) {
	o.Ids = v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *SubjectFilter) GetRelation() string {
	if o == nil || IsNil(o.Relation) {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectFilter) GetRelationOk() (*string, bool) {
	if o == nil || IsNil(o.Relation) {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *SubjectFilter) HasRelation() bool {
	if o != nil && !IsNil(o.Relation) {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *SubjectFilter) SetRelation(v string) {
	o.Relation = &v
}

func (o SubjectFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubjectFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Relation) {
		toSerialize["relation"] = o.Relation
	}
	return toSerialize, nil
}

type NullableSubjectFilter struct {
	value *SubjectFilter
	isSet bool
}

func (v NullableSubjectFilter) Get() *SubjectFilter {
	return v.value
}

func (v *NullableSubjectFilter) Set(val *SubjectFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectFilter(val *SubjectFilter) *NullableSubjectFilter {
	return &NullableSubjectFilter{value: val, isSet: true}
}

func (v NullableSubjectFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


