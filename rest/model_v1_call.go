/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the V1Call type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Call{}

// V1Call Call represents a call to a rule. It includes the name of the rule and the arguments passed to it.
type V1Call struct {
	RuleName *string `json:"ruleName,omitempty"`
	Arguments []Argument `json:"arguments,omitempty"`
}

// NewV1Call instantiates a new V1Call object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Call() *V1Call {
	this := V1Call{}
	return &this
}

// NewV1CallWithDefaults instantiates a new V1Call object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CallWithDefaults() *V1Call {
	this := V1Call{}
	return &this
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *V1Call) GetRuleName() string {
	if o == nil || IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Call) GetRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *V1Call) HasRuleName() bool {
	if o != nil && !IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *V1Call) SetRuleName(v string) {
	o.RuleName = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *V1Call) GetArguments() []Argument {
	if o == nil || IsNil(o.Arguments) {
		var ret []Argument
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Call) GetArgumentsOk() ([]Argument, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *V1Call) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []Argument and assigns it to the Arguments field.
func (o *V1Call) SetArguments(v []Argument) {
	o.Arguments = v
}

func (o V1Call) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Call) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleName) {
		toSerialize["ruleName"] = o.RuleName
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	return toSerialize, nil
}

type NullableV1Call struct {
	value *V1Call
	isSet bool
}

func (v NullableV1Call) Get() *V1Call {
	return v.value
}

func (v *NullableV1Call) Set(val *V1Call) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Call) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Call) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Call(val *V1Call) *NullableV1Call {
	return &NullableV1Call{value: val, isSet: true}
}

func (v NullableV1Call) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Call) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


