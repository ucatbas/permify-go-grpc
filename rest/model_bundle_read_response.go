/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the BundleReadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleReadResponse{}

// BundleReadResponse struct for BundleReadResponse
type BundleReadResponse struct {
	Bundle *DataBundle `json:"bundle,omitempty"`
}

// NewBundleReadResponse instantiates a new BundleReadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleReadResponse() *BundleReadResponse {
	this := BundleReadResponse{}
	return &this
}

// NewBundleReadResponseWithDefaults instantiates a new BundleReadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleReadResponseWithDefaults() *BundleReadResponse {
	this := BundleReadResponse{}
	return &this
}

// GetBundle returns the Bundle field value if set, zero value otherwise.
func (o *BundleReadResponse) GetBundle() DataBundle {
	if o == nil || IsNil(o.Bundle) {
		var ret DataBundle
		return ret
	}
	return *o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleReadResponse) GetBundleOk() (*DataBundle, bool) {
	if o == nil || IsNil(o.Bundle) {
		return nil, false
	}
	return o.Bundle, true
}

// HasBundle returns a boolean if a field has been set.
func (o *BundleReadResponse) HasBundle() bool {
	if o != nil && !IsNil(o.Bundle) {
		return true
	}

	return false
}

// SetBundle gets a reference to the given DataBundle and assigns it to the Bundle field.
func (o *BundleReadResponse) SetBundle(v DataBundle) {
	o.Bundle = &v
}

func (o BundleReadResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleReadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bundle) {
		toSerialize["bundle"] = o.Bundle
	}
	return toSerialize, nil
}

type NullableBundleReadResponse struct {
	value *BundleReadResponse
	isSet bool
}

func (v NullableBundleReadResponse) Get() *BundleReadResponse {
	return v.value
}

func (v *NullableBundleReadResponse) Set(val *BundleReadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleReadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleReadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleReadResponse(val *BundleReadResponse) *NullableBundleReadResponse {
	return &NullableBundleReadResponse{value: val, isSet: true}
}

func (v NullableBundleReadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleReadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


