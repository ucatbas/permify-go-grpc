/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the DataDeleteBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataDeleteBody{}

// DataDeleteBody DataDeleteRequest defines the structure of a request to delete data. It includes the tenant_id and filters for selecting tuples and attributes to be deleted.
type DataDeleteBody struct {
	TupleFilter *TupleFilter `json:"tuple_filter,omitempty"`
	AttributeFilter *AttributeFilter `json:"attribute_filter,omitempty"`
}

// NewDataDeleteBody instantiates a new DataDeleteBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataDeleteBody() *DataDeleteBody {
	this := DataDeleteBody{}
	return &this
}

// NewDataDeleteBodyWithDefaults instantiates a new DataDeleteBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataDeleteBodyWithDefaults() *DataDeleteBody {
	this := DataDeleteBody{}
	return &this
}

// GetTupleFilter returns the TupleFilter field value if set, zero value otherwise.
func (o *DataDeleteBody) GetTupleFilter() TupleFilter {
	if o == nil || IsNil(o.TupleFilter) {
		var ret TupleFilter
		return ret
	}
	return *o.TupleFilter
}

// GetTupleFilterOk returns a tuple with the TupleFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDeleteBody) GetTupleFilterOk() (*TupleFilter, bool) {
	if o == nil || IsNil(o.TupleFilter) {
		return nil, false
	}
	return o.TupleFilter, true
}

// HasTupleFilter returns a boolean if a field has been set.
func (o *DataDeleteBody) HasTupleFilter() bool {
	if o != nil && !IsNil(o.TupleFilter) {
		return true
	}

	return false
}

// SetTupleFilter gets a reference to the given TupleFilter and assigns it to the TupleFilter field.
func (o *DataDeleteBody) SetTupleFilter(v TupleFilter) {
	o.TupleFilter = &v
}

// GetAttributeFilter returns the AttributeFilter field value if set, zero value otherwise.
func (o *DataDeleteBody) GetAttributeFilter() AttributeFilter {
	if o == nil || IsNil(o.AttributeFilter) {
		var ret AttributeFilter
		return ret
	}
	return *o.AttributeFilter
}

// GetAttributeFilterOk returns a tuple with the AttributeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDeleteBody) GetAttributeFilterOk() (*AttributeFilter, bool) {
	if o == nil || IsNil(o.AttributeFilter) {
		return nil, false
	}
	return o.AttributeFilter, true
}

// HasAttributeFilter returns a boolean if a field has been set.
func (o *DataDeleteBody) HasAttributeFilter() bool {
	if o != nil && !IsNil(o.AttributeFilter) {
		return true
	}

	return false
}

// SetAttributeFilter gets a reference to the given AttributeFilter and assigns it to the AttributeFilter field.
func (o *DataDeleteBody) SetAttributeFilter(v AttributeFilter) {
	o.AttributeFilter = &v
}

func (o DataDeleteBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataDeleteBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TupleFilter) {
		toSerialize["tuple_filter"] = o.TupleFilter
	}
	if !IsNil(o.AttributeFilter) {
		toSerialize["attribute_filter"] = o.AttributeFilter
	}
	return toSerialize, nil
}

type NullableDataDeleteBody struct {
	value *DataDeleteBody
	isSet bool
}

func (v NullableDataDeleteBody) Get() *DataDeleteBody {
	return v.value
}

func (v *NullableDataDeleteBody) Set(val *DataDeleteBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDeleteBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDeleteBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDeleteBody(val *DataDeleteBody) *NullableDataDeleteBody {
	return &NullableDataDeleteBody{value: val, isSet: true}
}

func (v NullableDataDeleteBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDeleteBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


