/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Partials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Partials{}

// Partials struct for Partials
type Partials struct {
	Write []string `json:"write,omitempty"`
	Delete []string `json:"delete,omitempty"`
	Update []string `json:"update,omitempty"`
}

// NewPartials instantiates a new Partials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartials() *Partials {
	this := Partials{}
	return &this
}

// NewPartialsWithDefaults instantiates a new Partials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialsWithDefaults() *Partials {
	this := Partials{}
	return &this
}

// GetWrite returns the Write field value if set, zero value otherwise.
func (o *Partials) GetWrite() []string {
	if o == nil || IsNil(o.Write) {
		var ret []string
		return ret
	}
	return o.Write
}

// GetWriteOk returns a tuple with the Write field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partials) GetWriteOk() ([]string, bool) {
	if o == nil || IsNil(o.Write) {
		return nil, false
	}
	return o.Write, true
}

// HasWrite returns a boolean if a field has been set.
func (o *Partials) HasWrite() bool {
	if o != nil && !IsNil(o.Write) {
		return true
	}

	return false
}

// SetWrite gets a reference to the given []string and assigns it to the Write field.
func (o *Partials) SetWrite(v []string) {
	o.Write = v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *Partials) GetDelete() []string {
	if o == nil || IsNil(o.Delete) {
		var ret []string
		return ret
	}
	return o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partials) GetDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *Partials) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given []string and assigns it to the Delete field.
func (o *Partials) SetDelete(v []string) {
	o.Delete = v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *Partials) GetUpdate() []string {
	if o == nil || IsNil(o.Update) {
		var ret []string
		return ret
	}
	return o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partials) GetUpdateOk() ([]string, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *Partials) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given []string and assigns it to the Update field.
func (o *Partials) SetUpdate(v []string) {
	o.Update = v
}

func (o Partials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Partials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Write) {
		toSerialize["write"] = o.Write
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullablePartials struct {
	value *Partials
	isSet bool
}

func (v NullablePartials) Get() *Partials {
	return v.value
}

func (v *NullablePartials) Set(val *Partials) {
	v.value = val
	v.isSet = true
}

func (v NullablePartials) IsSet() bool {
	return v.isSet
}

func (v *NullablePartials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartials(val *Partials) *NullablePartials {
	return &NullablePartials{value: val, isSet: true}
}

func (v NullablePartials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


