/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the WatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchResponse{}

// WatchResponse WatchResponse is the response message for the Watch RPC. It contains the changes in the data that are being watched.
type WatchResponse struct {
	Changes *DataChanges `json:"changes,omitempty"`
}

// NewWatchResponse instantiates a new WatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchResponse() *WatchResponse {
	this := WatchResponse{}
	return &this
}

// NewWatchResponseWithDefaults instantiates a new WatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchResponseWithDefaults() *WatchResponse {
	this := WatchResponse{}
	return &this
}

// GetChanges returns the Changes field value if set, zero value otherwise.
func (o *WatchResponse) GetChanges() DataChanges {
	if o == nil || IsNil(o.Changes) {
		var ret DataChanges
		return ret
	}
	return *o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchResponse) GetChangesOk() (*DataChanges, bool) {
	if o == nil || IsNil(o.Changes) {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *WatchResponse) HasChanges() bool {
	if o != nil && !IsNil(o.Changes) {
		return true
	}

	return false
}

// SetChanges gets a reference to the given DataChanges and assigns it to the Changes field.
func (o *WatchResponse) SetChanges(v DataChanges) {
	o.Changes = &v
}

func (o WatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Changes) {
		toSerialize["changes"] = o.Changes
	}
	return toSerialize, nil
}

type NullableWatchResponse struct {
	value *WatchResponse
	isSet bool
}

func (v NullableWatchResponse) Get() *WatchResponse {
	return v.value
}

func (v *NullableWatchResponse) Set(val *WatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchResponse(val *WatchResponse) *NullableWatchResponse {
	return &NullableWatchResponse{value: val, isSet: true}
}

func (v NullableWatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


