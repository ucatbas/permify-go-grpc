/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the ExprCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExprCall{}

// ExprCall A call expression, including calls to predefined functions and operators.  For example, `value == 10`, `size(map_value)`.
type ExprCall struct {
	Target *Expr `json:"target,omitempty"`
	// Required. The name of the function or method being called.
	Function *string `json:"function,omitempty"`
	// The arguments.
	Args []Expr `json:"args,omitempty"`
}

// NewExprCall instantiates a new ExprCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExprCall() *ExprCall {
	this := ExprCall{}
	return &this
}

// NewExprCallWithDefaults instantiates a new ExprCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExprCallWithDefaults() *ExprCall {
	this := ExprCall{}
	return &this
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *ExprCall) GetTarget() Expr {
	if o == nil || IsNil(o.Target) {
		var ret Expr
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExprCall) GetTargetOk() (*Expr, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *ExprCall) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given Expr and assigns it to the Target field.
func (o *ExprCall) SetTarget(v Expr) {
	o.Target = &v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *ExprCall) GetFunction() string {
	if o == nil || IsNil(o.Function) {
		var ret string
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExprCall) GetFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *ExprCall) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given string and assigns it to the Function field.
func (o *ExprCall) SetFunction(v string) {
	o.Function = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ExprCall) GetArgs() []Expr {
	if o == nil || IsNil(o.Args) {
		var ret []Expr
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExprCall) GetArgsOk() ([]Expr, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ExprCall) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []Expr and assigns it to the Args field.
func (o *ExprCall) SetArgs(v []Expr) {
	o.Args = v
}

func (o ExprCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExprCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

type NullableExprCall struct {
	value *ExprCall
	isSet bool
}

func (v NullableExprCall) Get() *ExprCall {
	return v.value
}

func (v *NullableExprCall) Set(val *ExprCall) {
	v.value = val
	v.isSet = true
}

func (v NullableExprCall) IsSet() bool {
	return v.isSet
}

func (v *NullableExprCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExprCall(val *ExprCall) *NullableExprCall {
	return &NullableExprCall{value: val, isSet: true}
}

func (v NullableExprCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExprCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


