/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// WellKnownType Well-known protobuf types treated with first-class support in CEL.   - ANY: Well-known protobuf.Any type.  Any types are a polymorphic message type. During type-checking they are treated like `DYN` types, but at runtime they are resolved to a specific message type specified at evaluation time.  - TIMESTAMP: Well-known protobuf.Timestamp type, internally referenced as `timestamp`.  - DURATION: Well-known protobuf.Duration type, internally referenced as `duration`.
type WellKnownType string

// List of WellKnownType
const (
	WELLKNOWNTYPE_ANY WellKnownType = "ANY"
	WELLKNOWNTYPE_TIMESTAMP WellKnownType = "TIMESTAMP"
	WELLKNOWNTYPE_DURATION WellKnownType = "DURATION"
)

// All allowed values of WellKnownType enum
var AllowedWellKnownTypeEnumValues = []WellKnownType{
	"ANY",
	"TIMESTAMP",
	"DURATION",
}

func (v *WellKnownType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WellKnownType(value)
	for _, existing := range AllowedWellKnownTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WellKnownType", value)
}

// NewWellKnownTypeFromValue returns a pointer to a valid WellKnownType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWellKnownTypeFromValue(v string) (*WellKnownType, error) {
	ev := WellKnownType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WellKnownType: valid values are %v", v, AllowedWellKnownTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WellKnownType) IsValid() bool {
	for _, existing := range AllowedWellKnownTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WellKnownType value
func (v WellKnownType) Ptr() *WellKnownType {
	return &v
}

type NullableWellKnownType struct {
	value *WellKnownType
	isSet bool
}

func (v NullableWellKnownType) Get() *WellKnownType {
	return v.value
}

func (v *NullableWellKnownType) Set(val *WellKnownType) {
	v.value = val
	v.isSet = true
}

func (v NullableWellKnownType) IsSet() bool {
	return v.isSet
}

func (v *NullableWellKnownType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWellKnownType(val *WellKnownType) *NullableWellKnownType {
	return &NullableWellKnownType{value: val, isSet: true}
}

func (v NullableWellKnownType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWellKnownType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

