/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the RuleDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleDefinition{}

// RuleDefinition The RuleDefinition message provides detailed information about a specific rule.
type RuleDefinition struct {
	// The name of the rule, which follows a specific string pattern and has a maximum byte size.
	Name *string `json:"name,omitempty"`
	// Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
	Arguments *map[string]AttributeType `json:"arguments,omitempty"`
	Expression *CheckedExpr `json:"expression,omitempty"`
}

// NewRuleDefinition instantiates a new RuleDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleDefinition() *RuleDefinition {
	this := RuleDefinition{}
	return &this
}

// NewRuleDefinitionWithDefaults instantiates a new RuleDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleDefinitionWithDefaults() *RuleDefinition {
	this := RuleDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RuleDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RuleDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RuleDefinition) SetName(v string) {
	o.Name = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *RuleDefinition) GetArguments() map[string]AttributeType {
	if o == nil || IsNil(o.Arguments) {
		var ret map[string]AttributeType
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDefinition) GetArgumentsOk() (*map[string]AttributeType, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *RuleDefinition) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given map[string]AttributeType and assigns it to the Arguments field.
func (o *RuleDefinition) SetArguments(v map[string]AttributeType) {
	o.Arguments = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *RuleDefinition) GetExpression() CheckedExpr {
	if o == nil || IsNil(o.Expression) {
		var ret CheckedExpr
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleDefinition) GetExpressionOk() (*CheckedExpr, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *RuleDefinition) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given CheckedExpr and assigns it to the Expression field.
func (o *RuleDefinition) SetExpression(v CheckedExpr) {
	o.Expression = &v
}

func (o RuleDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

type NullableRuleDefinition struct {
	value *RuleDefinition
	isSet bool
}

func (v NullableRuleDefinition) Get() *RuleDefinition {
	return v.value
}

func (v *NullableRuleDefinition) Set(val *RuleDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleDefinition(val *RuleDefinition) *NullableRuleDefinition {
	return &NullableRuleDefinition{value: val, isSet: true}
}

func (v NullableRuleDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


