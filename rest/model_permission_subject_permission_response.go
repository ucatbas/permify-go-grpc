/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the PermissionSubjectPermissionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionSubjectPermissionResponse{}

// PermissionSubjectPermissionResponse PermissionSubjectPermissionResponse is the response message for the SubjectPermission method in the Permission service.
type PermissionSubjectPermissionResponse struct {
	// Map of results for each permission check.
	Results *map[string]CheckResult `json:"results,omitempty"`
}

// NewPermissionSubjectPermissionResponse instantiates a new PermissionSubjectPermissionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionSubjectPermissionResponse() *PermissionSubjectPermissionResponse {
	this := PermissionSubjectPermissionResponse{}
	return &this
}

// NewPermissionSubjectPermissionResponseWithDefaults instantiates a new PermissionSubjectPermissionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionSubjectPermissionResponseWithDefaults() *PermissionSubjectPermissionResponse {
	this := PermissionSubjectPermissionResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *PermissionSubjectPermissionResponse) GetResults() map[string]CheckResult {
	if o == nil || IsNil(o.Results) {
		var ret map[string]CheckResult
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionSubjectPermissionResponse) GetResultsOk() (*map[string]CheckResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *PermissionSubjectPermissionResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string]CheckResult and assigns it to the Results field.
func (o *PermissionSubjectPermissionResponse) SetResults(v map[string]CheckResult) {
	o.Results = &v
}

func (o PermissionSubjectPermissionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionSubjectPermissionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullablePermissionSubjectPermissionResponse struct {
	value *PermissionSubjectPermissionResponse
	isSet bool
}

func (v NullablePermissionSubjectPermissionResponse) Get() *PermissionSubjectPermissionResponse {
	return v.value
}

func (v *NullablePermissionSubjectPermissionResponse) Set(val *PermissionSubjectPermissionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionSubjectPermissionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionSubjectPermissionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionSubjectPermissionResponse(val *PermissionSubjectPermissionResponse) *NullablePermissionSubjectPermissionResponse {
	return &NullablePermissionSubjectPermissionResponse{value: val, isSet: true}
}

func (v NullablePermissionSubjectPermissionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionSubjectPermissionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


