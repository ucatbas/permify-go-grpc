/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the DataWriteRequestMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataWriteRequestMetadata{}

// DataWriteRequestMetadata DataWriteRequestMetadata defines the structure of metadata for a write request. It includes the schema version of the data to be written.
type DataWriteRequestMetadata struct {
	// schema_version represents the version of the schema for the data being written.
	SchemaVersion *string `json:"schema_version,omitempty"`
}

// NewDataWriteRequestMetadata instantiates a new DataWriteRequestMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataWriteRequestMetadata() *DataWriteRequestMetadata {
	this := DataWriteRequestMetadata{}
	return &this
}

// NewDataWriteRequestMetadataWithDefaults instantiates a new DataWriteRequestMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataWriteRequestMetadataWithDefaults() *DataWriteRequestMetadata {
	this := DataWriteRequestMetadata{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *DataWriteRequestMetadata) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataWriteRequestMetadata) GetSchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *DataWriteRequestMetadata) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *DataWriteRequestMetadata) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

func (o DataWriteRequestMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataWriteRequestMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	return toSerialize, nil
}

type NullableDataWriteRequestMetadata struct {
	value *DataWriteRequestMetadata
	isSet bool
}

func (v NullableDataWriteRequestMetadata) Get() *DataWriteRequestMetadata {
	return v.value
}

func (v *NullableDataWriteRequestMetadata) Set(val *DataWriteRequestMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDataWriteRequestMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDataWriteRequestMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataWriteRequestMetadata(val *DataWriteRequestMetadata) *NullableDataWriteRequestMetadata {
	return &NullableDataWriteRequestMetadata{value: val, isSet: true}
}

func (v NullableDataWriteRequestMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataWriteRequestMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


