/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the SchemaListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaListResponse{}

// SchemaListResponse struct for SchemaListResponse
type SchemaListResponse struct {
	Head *string `json:"head,omitempty"`
	Schemas []SchemaList `json:"schemas,omitempty"`
	// continuous_token is a string that can be used to paginate and retrieve the next set of results.
	ContinuousToken *string `json:"continuous_token,omitempty"`
}

// NewSchemaListResponse instantiates a new SchemaListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaListResponse() *SchemaListResponse {
	this := SchemaListResponse{}
	return &this
}

// NewSchemaListResponseWithDefaults instantiates a new SchemaListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaListResponseWithDefaults() *SchemaListResponse {
	this := SchemaListResponse{}
	return &this
}

// GetHead returns the Head field value if set, zero value otherwise.
func (o *SchemaListResponse) GetHead() string {
	if o == nil || IsNil(o.Head) {
		var ret string
		return ret
	}
	return *o.Head
}

// GetHeadOk returns a tuple with the Head field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaListResponse) GetHeadOk() (*string, bool) {
	if o == nil || IsNil(o.Head) {
		return nil, false
	}
	return o.Head, true
}

// HasHead returns a boolean if a field has been set.
func (o *SchemaListResponse) HasHead() bool {
	if o != nil && !IsNil(o.Head) {
		return true
	}

	return false
}

// SetHead gets a reference to the given string and assigns it to the Head field.
func (o *SchemaListResponse) SetHead(v string) {
	o.Head = &v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *SchemaListResponse) GetSchemas() []SchemaList {
	if o == nil || IsNil(o.Schemas) {
		var ret []SchemaList
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaListResponse) GetSchemasOk() ([]SchemaList, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *SchemaListResponse) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []SchemaList and assigns it to the Schemas field.
func (o *SchemaListResponse) SetSchemas(v []SchemaList) {
	o.Schemas = v
}

// GetContinuousToken returns the ContinuousToken field value if set, zero value otherwise.
func (o *SchemaListResponse) GetContinuousToken() string {
	if o == nil || IsNil(o.ContinuousToken) {
		var ret string
		return ret
	}
	return *o.ContinuousToken
}

// GetContinuousTokenOk returns a tuple with the ContinuousToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaListResponse) GetContinuousTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuousToken) {
		return nil, false
	}
	return o.ContinuousToken, true
}

// HasContinuousToken returns a boolean if a field has been set.
func (o *SchemaListResponse) HasContinuousToken() bool {
	if o != nil && !IsNil(o.ContinuousToken) {
		return true
	}

	return false
}

// SetContinuousToken gets a reference to the given string and assigns it to the ContinuousToken field.
func (o *SchemaListResponse) SetContinuousToken(v string) {
	o.ContinuousToken = &v
}

func (o SchemaListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Head) {
		toSerialize["head"] = o.Head
	}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.ContinuousToken) {
		toSerialize["continuous_token"] = o.ContinuousToken
	}
	return toSerialize, nil
}

type NullableSchemaListResponse struct {
	value *SchemaListResponse
	isSet bool
}

func (v NullableSchemaListResponse) Get() *SchemaListResponse {
	return v.value
}

func (v *NullableSchemaListResponse) Set(val *SchemaListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaListResponse(val *SchemaListResponse) *NullableSchemaListResponse {
	return &NullableSchemaListResponse{value: val, isSet: true}
}

func (v NullableSchemaListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


