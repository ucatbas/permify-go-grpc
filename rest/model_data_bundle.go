/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the DataBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataBundle{}

// DataBundle DataBundle is a message representing a bundle of data, which includes a name, a list of arguments, and a series of operations.
type DataBundle struct {
	// 'name' is a simple string field representing the name of the DataBundle.
	Name *string `json:"name,omitempty"`
	// 'arguments' is a repeated field, which means it can contain multiple strings. These are used to store a list of arguments related to the DataBundle.
	Arguments []string `json:"arguments,omitempty"`
	// 'operations' is a repeated field containing multiple Operation messages. Each Operation represents a specific action or set of actions to be performed.
	Operations []V1Operation `json:"operations,omitempty"`
}

// NewDataBundle instantiates a new DataBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataBundle() *DataBundle {
	this := DataBundle{}
	return &this
}

// NewDataBundleWithDefaults instantiates a new DataBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataBundleWithDefaults() *DataBundle {
	this := DataBundle{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataBundle) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBundle) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataBundle) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataBundle) SetName(v string) {
	o.Name = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *DataBundle) GetArguments() []string {
	if o == nil || IsNil(o.Arguments) {
		var ret []string
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBundle) GetArgumentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *DataBundle) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []string and assigns it to the Arguments field.
func (o *DataBundle) SetArguments(v []string) {
	o.Arguments = v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *DataBundle) GetOperations() []V1Operation {
	if o == nil || IsNil(o.Operations) {
		var ret []V1Operation
		return ret
	}
	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBundle) GetOperationsOk() ([]V1Operation, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *DataBundle) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []V1Operation and assigns it to the Operations field.
func (o *DataBundle) SetOperations(v []V1Operation) {
	o.Operations = v
}

func (o DataBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	return toSerialize, nil
}

type NullableDataBundle struct {
	value *DataBundle
	isSet bool
}

func (v NullableDataBundle) Get() *DataBundle {
	return v.value
}

func (v *NullableDataBundle) Set(val *DataBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableDataBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableDataBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataBundle(val *DataBundle) *NullableDataBundle {
	return &NullableDataBundle{value: val, isSet: true}
}

func (v NullableDataBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


