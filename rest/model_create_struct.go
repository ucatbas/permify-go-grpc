/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the CreateStruct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStruct{}

// CreateStruct A map or message creation expression.  Maps are constructed as `{'key_name': 'value'}`. Message construction is similar, but prefixed with a type name and composed of field ids: `types.MyType{field_id: 'value'}`.
type CreateStruct struct {
	// The type name of the message to be created, empty when creating map literals.
	MessageName *string `json:"messageName,omitempty"`
	// The entries in the creation expression.
	Entries []Entry `json:"entries,omitempty"`
}

// NewCreateStruct instantiates a new CreateStruct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStruct() *CreateStruct {
	this := CreateStruct{}
	return &this
}

// NewCreateStructWithDefaults instantiates a new CreateStruct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStructWithDefaults() *CreateStruct {
	this := CreateStruct{}
	return &this
}

// GetMessageName returns the MessageName field value if set, zero value otherwise.
func (o *CreateStruct) GetMessageName() string {
	if o == nil || IsNil(o.MessageName) {
		var ret string
		return ret
	}
	return *o.MessageName
}

// GetMessageNameOk returns a tuple with the MessageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStruct) GetMessageNameOk() (*string, bool) {
	if o == nil || IsNil(o.MessageName) {
		return nil, false
	}
	return o.MessageName, true
}

// HasMessageName returns a boolean if a field has been set.
func (o *CreateStruct) HasMessageName() bool {
	if o != nil && !IsNil(o.MessageName) {
		return true
	}

	return false
}

// SetMessageName gets a reference to the given string and assigns it to the MessageName field.
func (o *CreateStruct) SetMessageName(v string) {
	o.MessageName = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *CreateStruct) GetEntries() []Entry {
	if o == nil || IsNil(o.Entries) {
		var ret []Entry
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStruct) GetEntriesOk() ([]Entry, bool) {
	if o == nil || IsNil(o.Entries) {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *CreateStruct) HasEntries() bool {
	if o != nil && !IsNil(o.Entries) {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []Entry and assigns it to the Entries field.
func (o *CreateStruct) SetEntries(v []Entry) {
	o.Entries = v
}

func (o CreateStruct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStruct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageName) {
		toSerialize["messageName"] = o.MessageName
	}
	if !IsNil(o.Entries) {
		toSerialize["entries"] = o.Entries
	}
	return toSerialize, nil
}

type NullableCreateStruct struct {
	value *CreateStruct
	isSet bool
}

func (v NullableCreateStruct) Get() *CreateStruct {
	return v.value
}

func (v *NullableCreateStruct) Set(val *CreateStruct) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStruct) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStruct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStruct(val *CreateStruct) *NullableCreateStruct {
	return &NullableCreateStruct{value: val, isSet: true}
}

func (v NullableCreateStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStruct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


