/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the V1alpha1Reference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1Reference{}

// V1alpha1Reference Describes a resolved reference to a declaration.
type V1alpha1Reference struct {
	// The fully qualified name of the declaration.
	Name *string `json:"name,omitempty"`
	// For references to functions, this is a list of `Overload.overload_id` values which match according to typing rules.  If the list has more than one element, overload resolution among the presented candidates must happen at runtime because of dynamic types. The type checker attempts to narrow down this list as much as possible.  Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].
	OverloadId []string `json:"overloadId,omitempty"`
	Value *Constant `json:"value,omitempty"`
}

// NewV1alpha1Reference instantiates a new V1alpha1Reference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1Reference() *V1alpha1Reference {
	this := V1alpha1Reference{}
	return &this
}

// NewV1alpha1ReferenceWithDefaults instantiates a new V1alpha1Reference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ReferenceWithDefaults() *V1alpha1Reference {
	this := V1alpha1Reference{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1alpha1Reference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Reference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1alpha1Reference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1alpha1Reference) SetName(v string) {
	o.Name = &v
}

// GetOverloadId returns the OverloadId field value if set, zero value otherwise.
func (o *V1alpha1Reference) GetOverloadId() []string {
	if o == nil || IsNil(o.OverloadId) {
		var ret []string
		return ret
	}
	return o.OverloadId
}

// GetOverloadIdOk returns a tuple with the OverloadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Reference) GetOverloadIdOk() ([]string, bool) {
	if o == nil || IsNil(o.OverloadId) {
		return nil, false
	}
	return o.OverloadId, true
}

// HasOverloadId returns a boolean if a field has been set.
func (o *V1alpha1Reference) HasOverloadId() bool {
	if o != nil && !IsNil(o.OverloadId) {
		return true
	}

	return false
}

// SetOverloadId gets a reference to the given []string and assigns it to the OverloadId field.
func (o *V1alpha1Reference) SetOverloadId(v []string) {
	o.OverloadId = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1alpha1Reference) GetValue() Constant {
	if o == nil || IsNil(o.Value) {
		var ret Constant
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Reference) GetValueOk() (*Constant, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1alpha1Reference) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given Constant and assigns it to the Value field.
func (o *V1alpha1Reference) SetValue(v Constant) {
	o.Value = &v
}

func (o V1alpha1Reference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1Reference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OverloadId) {
		toSerialize["overloadId"] = o.OverloadId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableV1alpha1Reference struct {
	value *V1alpha1Reference
	isSet bool
}

func (v NullableV1alpha1Reference) Get() *V1alpha1Reference {
	return v.value
}

func (v *NullableV1alpha1Reference) Set(val *V1alpha1Reference) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1Reference) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1Reference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1Reference(val *V1alpha1Reference) *NullableV1alpha1Reference {
	return &NullableV1alpha1Reference{value: val, isSet: true}
}

func (v NullableV1alpha1Reference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1Reference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


