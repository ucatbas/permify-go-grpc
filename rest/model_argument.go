/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Argument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Argument{}

// Argument Argument defines the type of argument in a Call. It can be either a ComputedAttribute or a ContextAttribute.
type Argument struct {
	ComputedAttribute *ComputedAttribute `json:"computedAttribute,omitempty"`
	ContextAttribute *ContextAttribute `json:"contextAttribute,omitempty"`
}

// NewArgument instantiates a new Argument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArgument() *Argument {
	this := Argument{}
	return &this
}

// NewArgumentWithDefaults instantiates a new Argument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArgumentWithDefaults() *Argument {
	this := Argument{}
	return &this
}

// GetComputedAttribute returns the ComputedAttribute field value if set, zero value otherwise.
func (o *Argument) GetComputedAttribute() ComputedAttribute {
	if o == nil || IsNil(o.ComputedAttribute) {
		var ret ComputedAttribute
		return ret
	}
	return *o.ComputedAttribute
}

// GetComputedAttributeOk returns a tuple with the ComputedAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetComputedAttributeOk() (*ComputedAttribute, bool) {
	if o == nil || IsNil(o.ComputedAttribute) {
		return nil, false
	}
	return o.ComputedAttribute, true
}

// HasComputedAttribute returns a boolean if a field has been set.
func (o *Argument) HasComputedAttribute() bool {
	if o != nil && !IsNil(o.ComputedAttribute) {
		return true
	}

	return false
}

// SetComputedAttribute gets a reference to the given ComputedAttribute and assigns it to the ComputedAttribute field.
func (o *Argument) SetComputedAttribute(v ComputedAttribute) {
	o.ComputedAttribute = &v
}

// GetContextAttribute returns the ContextAttribute field value if set, zero value otherwise.
func (o *Argument) GetContextAttribute() ContextAttribute {
	if o == nil || IsNil(o.ContextAttribute) {
		var ret ContextAttribute
		return ret
	}
	return *o.ContextAttribute
}

// GetContextAttributeOk returns a tuple with the ContextAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetContextAttributeOk() (*ContextAttribute, bool) {
	if o == nil || IsNil(o.ContextAttribute) {
		return nil, false
	}
	return o.ContextAttribute, true
}

// HasContextAttribute returns a boolean if a field has been set.
func (o *Argument) HasContextAttribute() bool {
	if o != nil && !IsNil(o.ContextAttribute) {
		return true
	}

	return false
}

// SetContextAttribute gets a reference to the given ContextAttribute and assigns it to the ContextAttribute field.
func (o *Argument) SetContextAttribute(v ContextAttribute) {
	o.ContextAttribute = &v
}

func (o Argument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Argument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComputedAttribute) {
		toSerialize["computedAttribute"] = o.ComputedAttribute
	}
	if !IsNil(o.ContextAttribute) {
		toSerialize["contextAttribute"] = o.ContextAttribute
	}
	return toSerialize, nil
}

type NullableArgument struct {
	value *Argument
	isSet bool
}

func (v NullableArgument) Get() *Argument {
	return v.value
}

func (v *NullableArgument) Set(val *Argument) {
	v.value = val
	v.isSet = true
}

func (v NullableArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArgument(val *Argument) *NullableArgument {
	return &NullableArgument{value: val, isSet: true}
}

func (v NullableArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


