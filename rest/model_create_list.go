/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the CreateList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateList{}

// CreateList A list creation expression.  Lists may either be homogenous, e.g. `[1, 2, 3]`, or heterogeneous, e.g. `dyn([1, 'hello', 2.0])`
type CreateList struct {
	// The elements part of the list.
	Elements []Expr `json:"elements,omitempty"`
	// The indices within the elements list which are marked as optional elements.  When an optional-typed value is present, the value it contains is included in the list. If the optional-typed value is absent, the list element is omitted from the CreateList result.
	OptionalIndices []int32 `json:"optionalIndices,omitempty"`
}

// NewCreateList instantiates a new CreateList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateList() *CreateList {
	this := CreateList{}
	return &this
}

// NewCreateListWithDefaults instantiates a new CreateList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateListWithDefaults() *CreateList {
	this := CreateList{}
	return &this
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *CreateList) GetElements() []Expr {
	if o == nil || IsNil(o.Elements) {
		var ret []Expr
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateList) GetElementsOk() ([]Expr, bool) {
	if o == nil || IsNil(o.Elements) {
		return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *CreateList) HasElements() bool {
	if o != nil && !IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given []Expr and assigns it to the Elements field.
func (o *CreateList) SetElements(v []Expr) {
	o.Elements = v
}

// GetOptionalIndices returns the OptionalIndices field value if set, zero value otherwise.
func (o *CreateList) GetOptionalIndices() []int32 {
	if o == nil || IsNil(o.OptionalIndices) {
		var ret []int32
		return ret
	}
	return o.OptionalIndices
}

// GetOptionalIndicesOk returns a tuple with the OptionalIndices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateList) GetOptionalIndicesOk() ([]int32, bool) {
	if o == nil || IsNil(o.OptionalIndices) {
		return nil, false
	}
	return o.OptionalIndices, true
}

// HasOptionalIndices returns a boolean if a field has been set.
func (o *CreateList) HasOptionalIndices() bool {
	if o != nil && !IsNil(o.OptionalIndices) {
		return true
	}

	return false
}

// SetOptionalIndices gets a reference to the given []int32 and assigns it to the OptionalIndices field.
func (o *CreateList) SetOptionalIndices(v []int32) {
	o.OptionalIndices = v
}

func (o CreateList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Elements) {
		toSerialize["elements"] = o.Elements
	}
	if !IsNil(o.OptionalIndices) {
		toSerialize["optionalIndices"] = o.OptionalIndices
	}
	return toSerialize, nil
}

type NullableCreateList struct {
	value *CreateList
	isSet bool
}

func (v NullableCreateList) Get() *CreateList {
	return v.value
}

func (v *NullableCreateList) Set(val *CreateList) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateList) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateList(val *CreateList) *NullableCreateList {
	return &NullableCreateList{value: val, isSet: true}
}

func (v NullableCreateList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


