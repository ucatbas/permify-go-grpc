/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the SchemaPartialWriteRequestMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaPartialWriteRequestMetadata{}

// SchemaPartialWriteRequestMetadata SchemaPartialWriteRequestMetadata provides additional information for the Schema Partial Write request. It contains schema_version to specify which version of the schema should be read.
type SchemaPartialWriteRequestMetadata struct {
	// schema_version is the string that identifies the version of the schema to be read.
	SchemaVersion *string `json:"schema_version,omitempty"`
}

// NewSchemaPartialWriteRequestMetadata instantiates a new SchemaPartialWriteRequestMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaPartialWriteRequestMetadata() *SchemaPartialWriteRequestMetadata {
	this := SchemaPartialWriteRequestMetadata{}
	return &this
}

// NewSchemaPartialWriteRequestMetadataWithDefaults instantiates a new SchemaPartialWriteRequestMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaPartialWriteRequestMetadataWithDefaults() *SchemaPartialWriteRequestMetadata {
	this := SchemaPartialWriteRequestMetadata{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *SchemaPartialWriteRequestMetadata) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaPartialWriteRequestMetadata) GetSchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *SchemaPartialWriteRequestMetadata) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *SchemaPartialWriteRequestMetadata) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

func (o SchemaPartialWriteRequestMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaPartialWriteRequestMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	return toSerialize, nil
}

type NullableSchemaPartialWriteRequestMetadata struct {
	value *SchemaPartialWriteRequestMetadata
	isSet bool
}

func (v NullableSchemaPartialWriteRequestMetadata) Get() *SchemaPartialWriteRequestMetadata {
	return v.value
}

func (v *NullableSchemaPartialWriteRequestMetadata) Set(val *SchemaPartialWriteRequestMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaPartialWriteRequestMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaPartialWriteRequestMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaPartialWriteRequestMetadata(val *SchemaPartialWriteRequestMetadata) *NullableSchemaPartialWriteRequestMetadata {
	return &NullableSchemaPartialWriteRequestMetadata{value: val, isSet: true}
}

func (v NullableSchemaPartialWriteRequestMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaPartialWriteRequestMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


