/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the Select type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Select{}

// Select A field selection expression. e.g. `request.auth`.
type Select struct {
	Operand *Expr `json:"operand,omitempty"`
	// Required. The name of the field to select.  For example, in the select expression `request.auth`, the `auth` portion of the expression would be the `field`.
	Field *string `json:"field,omitempty"`
	// Whether the select is to be interpreted as a field presence test.  This results from the macro `has(request.auth)`.
	TestOnly *bool `json:"testOnly,omitempty"`
}

// NewSelect instantiates a new Select object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelect() *Select {
	this := Select{}
	return &this
}

// NewSelectWithDefaults instantiates a new Select object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectWithDefaults() *Select {
	this := Select{}
	return &this
}

// GetOperand returns the Operand field value if set, zero value otherwise.
func (o *Select) GetOperand() Expr {
	if o == nil || IsNil(o.Operand) {
		var ret Expr
		return ret
	}
	return *o.Operand
}

// GetOperandOk returns a tuple with the Operand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Select) GetOperandOk() (*Expr, bool) {
	if o == nil || IsNil(o.Operand) {
		return nil, false
	}
	return o.Operand, true
}

// HasOperand returns a boolean if a field has been set.
func (o *Select) HasOperand() bool {
	if o != nil && !IsNil(o.Operand) {
		return true
	}

	return false
}

// SetOperand gets a reference to the given Expr and assigns it to the Operand field.
func (o *Select) SetOperand(v Expr) {
	o.Operand = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *Select) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Select) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *Select) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *Select) SetField(v string) {
	o.Field = &v
}

// GetTestOnly returns the TestOnly field value if set, zero value otherwise.
func (o *Select) GetTestOnly() bool {
	if o == nil || IsNil(o.TestOnly) {
		var ret bool
		return ret
	}
	return *o.TestOnly
}

// GetTestOnlyOk returns a tuple with the TestOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Select) GetTestOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.TestOnly) {
		return nil, false
	}
	return o.TestOnly, true
}

// HasTestOnly returns a boolean if a field has been set.
func (o *Select) HasTestOnly() bool {
	if o != nil && !IsNil(o.TestOnly) {
		return true
	}

	return false
}

// SetTestOnly gets a reference to the given bool and assigns it to the TestOnly field.
func (o *Select) SetTestOnly(v bool) {
	o.TestOnly = &v
}

func (o Select) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Select) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operand) {
		toSerialize["operand"] = o.Operand
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.TestOnly) {
		toSerialize["testOnly"] = o.TestOnly
	}
	return toSerialize, nil
}

type NullableSelect struct {
	value *Select
	isSet bool
}

func (v NullableSelect) Get() *Select {
	return v.value
}

func (v *NullableSelect) Set(val *Select) {
	v.value = val
	v.isSet = true
}

func (v NullableSelect) IsSet() bool {
	return v.isSet
}

func (v *NullableSelect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelect(val *Select) *NullableSelect {
	return &NullableSelect{value: val, isSet: true}
}

func (v NullableSelect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


