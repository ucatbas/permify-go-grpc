/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the MapType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapType{}

// MapType Map type with parameterized key and value types, e.g. `map<string, int>`.
type MapType struct {
	KeyType *V1alpha1Type `json:"keyType,omitempty"`
	ValueType *V1alpha1Type `json:"valueType,omitempty"`
}

// NewMapType instantiates a new MapType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapType() *MapType {
	this := MapType{}
	return &this
}

// NewMapTypeWithDefaults instantiates a new MapType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapTypeWithDefaults() *MapType {
	this := MapType{}
	return &this
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *MapType) GetKeyType() V1alpha1Type {
	if o == nil || IsNil(o.KeyType) {
		var ret V1alpha1Type
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapType) GetKeyTypeOk() (*V1alpha1Type, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *MapType) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given V1alpha1Type and assigns it to the KeyType field.
func (o *MapType) SetKeyType(v V1alpha1Type) {
	o.KeyType = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *MapType) GetValueType() V1alpha1Type {
	if o == nil || IsNil(o.ValueType) {
		var ret V1alpha1Type
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapType) GetValueTypeOk() (*V1alpha1Type, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *MapType) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given V1alpha1Type and assigns it to the ValueType field.
func (o *MapType) SetValueType(v V1alpha1Type) {
	o.ValueType = &v
}

func (o MapType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyType) {
		toSerialize["keyType"] = o.KeyType
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	return toSerialize, nil
}

type NullableMapType struct {
	value *MapType
	isSet bool
}

func (v NullableMapType) Get() *MapType {
	return v.value
}

func (v *NullableMapType) Set(val *MapType) {
	v.value = val
	v.isSet = true
}

func (v NullableMapType) IsSet() bool {
	return v.isSet
}

func (v *NullableMapType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapType(val *MapType) *NullableMapType {
	return &NullableMapType{value: val, isSet: true}
}

func (v NullableMapType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


