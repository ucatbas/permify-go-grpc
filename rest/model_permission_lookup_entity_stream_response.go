/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the PermissionLookupEntityStreamResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionLookupEntityStreamResponse{}

// PermissionLookupEntityStreamResponse PermissionLookupEntityStreamResponse is the response message for the LookupEntityStream method in the Permission service.
type PermissionLookupEntityStreamResponse struct {
	// Identifier for an entity that matches the lookup.
	EntityId *string `json:"entity_id,omitempty"`
}

// NewPermissionLookupEntityStreamResponse instantiates a new PermissionLookupEntityStreamResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionLookupEntityStreamResponse() *PermissionLookupEntityStreamResponse {
	this := PermissionLookupEntityStreamResponse{}
	return &this
}

// NewPermissionLookupEntityStreamResponseWithDefaults instantiates a new PermissionLookupEntityStreamResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionLookupEntityStreamResponseWithDefaults() *PermissionLookupEntityStreamResponse {
	this := PermissionLookupEntityStreamResponse{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *PermissionLookupEntityStreamResponse) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionLookupEntityStreamResponse) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *PermissionLookupEntityStreamResponse) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *PermissionLookupEntityStreamResponse) SetEntityId(v string) {
	o.EntityId = &v
}

func (o PermissionLookupEntityStreamResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionLookupEntityStreamResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityId) {
		toSerialize["entity_id"] = o.EntityId
	}
	return toSerialize, nil
}

type NullablePermissionLookupEntityStreamResponse struct {
	value *PermissionLookupEntityStreamResponse
	isSet bool
}

func (v NullablePermissionLookupEntityStreamResponse) Get() *PermissionLookupEntityStreamResponse {
	return v.value
}

func (v *NullablePermissionLookupEntityStreamResponse) Set(val *PermissionLookupEntityStreamResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionLookupEntityStreamResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionLookupEntityStreamResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionLookupEntityStreamResponse(val *PermissionLookupEntityStreamResponse) *NullablePermissionLookupEntityStreamResponse {
	return &NullablePermissionLookupEntityStreamResponse{value: val, isSet: true}
}

func (v NullablePermissionLookupEntityStreamResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionLookupEntityStreamResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


