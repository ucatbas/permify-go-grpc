/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the V1Expand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Expand{}

// V1Expand Expand is used to define a hierarchical structure for permissions. It has an entity, permission, and arguments. The node can be either another hierarchical structure or a set of subjects.
type V1Expand struct {
	Entity *Entity `json:"entity,omitempty"`
	// permission is the permission applied to the entity.
	Permission *string `json:"permission,omitempty"`
	// arguments are the additional information or context used to evaluate permissions.
	Arguments []Argument `json:"arguments,omitempty"`
	Expand *ExpandTreeNode `json:"expand,omitempty"`
	Leaf *ExpandLeaf `json:"leaf,omitempty"`
}

// NewV1Expand instantiates a new V1Expand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Expand() *V1Expand {
	this := V1Expand{}
	return &this
}

// NewV1ExpandWithDefaults instantiates a new V1Expand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ExpandWithDefaults() *V1Expand {
	this := V1Expand{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *V1Expand) GetEntity() Entity {
	if o == nil || IsNil(o.Entity) {
		var ret Entity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Expand) GetEntityOk() (*Entity, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *V1Expand) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Entity and assigns it to the Entity field.
func (o *V1Expand) SetEntity(v Entity) {
	o.Entity = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *V1Expand) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Expand) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *V1Expand) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *V1Expand) SetPermission(v string) {
	o.Permission = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *V1Expand) GetArguments() []Argument {
	if o == nil || IsNil(o.Arguments) {
		var ret []Argument
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Expand) GetArgumentsOk() ([]Argument, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *V1Expand) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []Argument and assigns it to the Arguments field.
func (o *V1Expand) SetArguments(v []Argument) {
	o.Arguments = v
}

// GetExpand returns the Expand field value if set, zero value otherwise.
func (o *V1Expand) GetExpand() ExpandTreeNode {
	if o == nil || IsNil(o.Expand) {
		var ret ExpandTreeNode
		return ret
	}
	return *o.Expand
}

// GetExpandOk returns a tuple with the Expand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Expand) GetExpandOk() (*ExpandTreeNode, bool) {
	if o == nil || IsNil(o.Expand) {
		return nil, false
	}
	return o.Expand, true
}

// HasExpand returns a boolean if a field has been set.
func (o *V1Expand) HasExpand() bool {
	if o != nil && !IsNil(o.Expand) {
		return true
	}

	return false
}

// SetExpand gets a reference to the given ExpandTreeNode and assigns it to the Expand field.
func (o *V1Expand) SetExpand(v ExpandTreeNode) {
	o.Expand = &v
}

// GetLeaf returns the Leaf field value if set, zero value otherwise.
func (o *V1Expand) GetLeaf() ExpandLeaf {
	if o == nil || IsNil(o.Leaf) {
		var ret ExpandLeaf
		return ret
	}
	return *o.Leaf
}

// GetLeafOk returns a tuple with the Leaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Expand) GetLeafOk() (*ExpandLeaf, bool) {
	if o == nil || IsNil(o.Leaf) {
		return nil, false
	}
	return o.Leaf, true
}

// HasLeaf returns a boolean if a field has been set.
func (o *V1Expand) HasLeaf() bool {
	if o != nil && !IsNil(o.Leaf) {
		return true
	}

	return false
}

// SetLeaf gets a reference to the given ExpandLeaf and assigns it to the Leaf field.
func (o *V1Expand) SetLeaf(v ExpandLeaf) {
	o.Leaf = &v
}

func (o V1Expand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Expand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !IsNil(o.Expand) {
		toSerialize["expand"] = o.Expand
	}
	if !IsNil(o.Leaf) {
		toSerialize["leaf"] = o.Leaf
	}
	return toSerialize, nil
}

type NullableV1Expand struct {
	value *V1Expand
	isSet bool
}

func (v NullableV1Expand) Get() *V1Expand {
	return v.value
}

func (v *NullableV1Expand) Set(val *V1Expand) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Expand) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Expand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Expand(val *V1Expand) *NullableV1Expand {
	return &NullableV1Expand{value: val, isSet: true}
}

func (v NullableV1Expand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Expand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


