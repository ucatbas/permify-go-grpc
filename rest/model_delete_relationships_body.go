/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the DeleteRelationshipsBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteRelationshipsBody{}

// DeleteRelationshipsBody struct for DeleteRelationshipsBody
type DeleteRelationshipsBody struct {
	Filter *TupleFilter `json:"filter,omitempty"`
}

// NewDeleteRelationshipsBody instantiates a new DeleteRelationshipsBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteRelationshipsBody() *DeleteRelationshipsBody {
	this := DeleteRelationshipsBody{}
	return &this
}

// NewDeleteRelationshipsBodyWithDefaults instantiates a new DeleteRelationshipsBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteRelationshipsBodyWithDefaults() *DeleteRelationshipsBody {
	this := DeleteRelationshipsBody{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *DeleteRelationshipsBody) GetFilter() TupleFilter {
	if o == nil || IsNil(o.Filter) {
		var ret TupleFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteRelationshipsBody) GetFilterOk() (*TupleFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *DeleteRelationshipsBody) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given TupleFilter and assigns it to the Filter field.
func (o *DeleteRelationshipsBody) SetFilter(v TupleFilter) {
	o.Filter = &v
}

func (o DeleteRelationshipsBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteRelationshipsBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

type NullableDeleteRelationshipsBody struct {
	value *DeleteRelationshipsBody
	isSet bool
}

func (v NullableDeleteRelationshipsBody) Get() *DeleteRelationshipsBody {
	return v.value
}

func (v *NullableDeleteRelationshipsBody) Set(val *DeleteRelationshipsBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteRelationshipsBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteRelationshipsBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteRelationshipsBody(val *DeleteRelationshipsBody) *NullableDeleteRelationshipsBody {
	return &NullableDeleteRelationshipsBody{value: val, isSet: true}
}

func (v NullableDeleteRelationshipsBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteRelationshipsBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


