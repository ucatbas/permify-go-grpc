/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
	"fmt"
)

// PrimitiveType CEL primitive types.   - BOOL: Boolean type.  - INT64: Int64 type.  Proto-based integer values are widened to int64.  - UINT64: Uint64 type.  Proto-based unsigned integer values are widened to uint64.  - DOUBLE: Double type.  Proto-based float values are widened to double values.  - STRING: String type.  - BYTES: Bytes type.
type PrimitiveType string

// List of PrimitiveType
const (
	PRIMITIVETYPE_BOOL PrimitiveType = "BOOL"
	PRIMITIVETYPE_INT64 PrimitiveType = "INT64"
	PRIMITIVETYPE_UINT64 PrimitiveType = "UINT64"
	PRIMITIVETYPE_DOUBLE PrimitiveType = "DOUBLE"
	PRIMITIVETYPE_STRING PrimitiveType = "STRING"
	PRIMITIVETYPE_BYTES PrimitiveType = "BYTES"
)

// All allowed values of PrimitiveType enum
var AllowedPrimitiveTypeEnumValues = []PrimitiveType{
	"BOOL",
	"INT64",
	"UINT64",
	"DOUBLE",
	"STRING",
	"BYTES",
}

func (v *PrimitiveType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrimitiveType(value)
	for _, existing := range AllowedPrimitiveTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrimitiveType", value)
}

// NewPrimitiveTypeFromValue returns a pointer to a valid PrimitiveType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrimitiveTypeFromValue(v string) (*PrimitiveType, error) {
	ev := PrimitiveType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrimitiveType: valid values are %v", v, AllowedPrimitiveTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrimitiveType) IsValid() bool {
	for _, existing := range AllowedPrimitiveTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrimitiveType value
func (v PrimitiveType) Ptr() *PrimitiveType {
	return &v
}

type NullablePrimitiveType struct {
	value *PrimitiveType
	isSet bool
}

func (v NullablePrimitiveType) Get() *PrimitiveType {
	return v.value
}

func (v *NullablePrimitiveType) Set(val *PrimitiveType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimitiveType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimitiveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimitiveType(val *PrimitiveType) *NullablePrimitiveType {
	return &NullablePrimitiveType{value: val, isSet: true}
}

func (v NullablePrimitiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimitiveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

