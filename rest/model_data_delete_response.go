/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the DataDeleteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataDeleteResponse{}

// DataDeleteResponse DataDeleteResponse defines the structure of the response to a data delete request. It includes a snap_token representing the state of the database after the deletion.
type DataDeleteResponse struct {
	// The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)
	SnapToken *string `json:"snap_token,omitempty"`
}

// NewDataDeleteResponse instantiates a new DataDeleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataDeleteResponse() *DataDeleteResponse {
	this := DataDeleteResponse{}
	return &this
}

// NewDataDeleteResponseWithDefaults instantiates a new DataDeleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataDeleteResponseWithDefaults() *DataDeleteResponse {
	this := DataDeleteResponse{}
	return &this
}

// GetSnapToken returns the SnapToken field value if set, zero value otherwise.
func (o *DataDeleteResponse) GetSnapToken() string {
	if o == nil || IsNil(o.SnapToken) {
		var ret string
		return ret
	}
	return *o.SnapToken
}

// GetSnapTokenOk returns a tuple with the SnapToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDeleteResponse) GetSnapTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SnapToken) {
		return nil, false
	}
	return o.SnapToken, true
}

// HasSnapToken returns a boolean if a field has been set.
func (o *DataDeleteResponse) HasSnapToken() bool {
	if o != nil && !IsNil(o.SnapToken) {
		return true
	}

	return false
}

// SetSnapToken gets a reference to the given string and assigns it to the SnapToken field.
func (o *DataDeleteResponse) SetSnapToken(v string) {
	o.SnapToken = &v
}

func (o DataDeleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataDeleteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SnapToken) {
		toSerialize["snap_token"] = o.SnapToken
	}
	return toSerialize, nil
}

type NullableDataDeleteResponse struct {
	value *DataDeleteResponse
	isSet bool
}

func (v NullableDataDeleteResponse) Get() *DataDeleteResponse {
	return v.value
}

func (v *NullableDataDeleteResponse) Set(val *DataDeleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDeleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDeleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDeleteResponse(val *DataDeleteResponse) *NullableDataDeleteResponse {
	return &NullableDataDeleteResponse{value: val, isSet: true}
}

func (v NullableDataDeleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDeleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


