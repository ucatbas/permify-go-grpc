/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the PermissionCheckResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionCheckResponse{}

// PermissionCheckResponse PermissionCheckResponse is the response message for the Check method in the Permission service.
type PermissionCheckResponse struct {
	Can *CheckResult `json:"can,omitempty"`
	Metadata *PermissionCheckResponseMetadata `json:"metadata,omitempty"`
}

// NewPermissionCheckResponse instantiates a new PermissionCheckResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionCheckResponse() *PermissionCheckResponse {
	this := PermissionCheckResponse{}
	return &this
}

// NewPermissionCheckResponseWithDefaults instantiates a new PermissionCheckResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionCheckResponseWithDefaults() *PermissionCheckResponse {
	this := PermissionCheckResponse{}
	return &this
}

// GetCan returns the Can field value if set, zero value otherwise.
func (o *PermissionCheckResponse) GetCan() CheckResult {
	if o == nil || IsNil(o.Can) {
		var ret CheckResult
		return ret
	}
	return *o.Can
}

// GetCanOk returns a tuple with the Can field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionCheckResponse) GetCanOk() (*CheckResult, bool) {
	if o == nil || IsNil(o.Can) {
		return nil, false
	}
	return o.Can, true
}

// HasCan returns a boolean if a field has been set.
func (o *PermissionCheckResponse) HasCan() bool {
	if o != nil && !IsNil(o.Can) {
		return true
	}

	return false
}

// SetCan gets a reference to the given CheckResult and assigns it to the Can field.
func (o *PermissionCheckResponse) SetCan(v CheckResult) {
	o.Can = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PermissionCheckResponse) GetMetadata() PermissionCheckResponseMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret PermissionCheckResponseMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionCheckResponse) GetMetadataOk() (*PermissionCheckResponseMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PermissionCheckResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PermissionCheckResponseMetadata and assigns it to the Metadata field.
func (o *PermissionCheckResponse) SetMetadata(v PermissionCheckResponseMetadata) {
	o.Metadata = &v
}

func (o PermissionCheckResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionCheckResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Can) {
		toSerialize["can"] = o.Can
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullablePermissionCheckResponse struct {
	value *PermissionCheckResponse
	isSet bool
}

func (v NullablePermissionCheckResponse) Get() *PermissionCheckResponse {
	return v.value
}

func (v *NullablePermissionCheckResponse) Set(val *PermissionCheckResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionCheckResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionCheckResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionCheckResponse(val *PermissionCheckResponse) *NullablePermissionCheckResponse {
	return &NullablePermissionCheckResponse{value: val, isSet: true}
}

func (v NullablePermissionCheckResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionCheckResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


