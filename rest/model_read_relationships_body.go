/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the ReadRelationshipsBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadRelationshipsBody{}

// ReadRelationshipsBody RelationshipReadRequest defines the structure of a request for reading relationships. It contains the necessary information such as tenant_id, metadata, and filter for the read operation.
type ReadRelationshipsBody struct {
	Metadata *RelationshipReadRequestMetadata `json:"metadata,omitempty"`
	Filter *TupleFilter `json:"filter,omitempty"`
	// page_size specifies the number of results to return in a single page. If more results are available, a continuous_token is included in the response.
	PageSize *int64 `json:"page_size,omitempty"`
	// continuous_token is used in case of paginated reads to get the next page of results.
	ContinuousToken *string `json:"continuous_token,omitempty"`
}

// NewReadRelationshipsBody instantiates a new ReadRelationshipsBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadRelationshipsBody() *ReadRelationshipsBody {
	this := ReadRelationshipsBody{}
	return &this
}

// NewReadRelationshipsBodyWithDefaults instantiates a new ReadRelationshipsBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadRelationshipsBodyWithDefaults() *ReadRelationshipsBody {
	this := ReadRelationshipsBody{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ReadRelationshipsBody) GetMetadata() RelationshipReadRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret RelationshipReadRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadRelationshipsBody) GetMetadataOk() (*RelationshipReadRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ReadRelationshipsBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given RelationshipReadRequestMetadata and assigns it to the Metadata field.
func (o *ReadRelationshipsBody) SetMetadata(v RelationshipReadRequestMetadata) {
	o.Metadata = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ReadRelationshipsBody) GetFilter() TupleFilter {
	if o == nil || IsNil(o.Filter) {
		var ret TupleFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadRelationshipsBody) GetFilterOk() (*TupleFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ReadRelationshipsBody) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given TupleFilter and assigns it to the Filter field.
func (o *ReadRelationshipsBody) SetFilter(v TupleFilter) {
	o.Filter = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *ReadRelationshipsBody) GetPageSize() int64 {
	if o == nil || IsNil(o.PageSize) {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadRelationshipsBody) GetPageSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *ReadRelationshipsBody) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *ReadRelationshipsBody) SetPageSize(v int64) {
	o.PageSize = &v
}

// GetContinuousToken returns the ContinuousToken field value if set, zero value otherwise.
func (o *ReadRelationshipsBody) GetContinuousToken() string {
	if o == nil || IsNil(o.ContinuousToken) {
		var ret string
		return ret
	}
	return *o.ContinuousToken
}

// GetContinuousTokenOk returns a tuple with the ContinuousToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadRelationshipsBody) GetContinuousTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuousToken) {
		return nil, false
	}
	return o.ContinuousToken, true
}

// HasContinuousToken returns a boolean if a field has been set.
func (o *ReadRelationshipsBody) HasContinuousToken() bool {
	if o != nil && !IsNil(o.ContinuousToken) {
		return true
	}

	return false
}

// SetContinuousToken gets a reference to the given string and assigns it to the ContinuousToken field.
func (o *ReadRelationshipsBody) SetContinuousToken(v string) {
	o.ContinuousToken = &v
}

func (o ReadRelationshipsBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadRelationshipsBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.PageSize) {
		toSerialize["page_size"] = o.PageSize
	}
	if !IsNil(o.ContinuousToken) {
		toSerialize["continuous_token"] = o.ContinuousToken
	}
	return toSerialize, nil
}

type NullableReadRelationshipsBody struct {
	value *ReadRelationshipsBody
	isSet bool
}

func (v NullableReadRelationshipsBody) Get() *ReadRelationshipsBody {
	return v.value
}

func (v *NullableReadRelationshipsBody) Set(val *ReadRelationshipsBody) {
	v.value = val
	v.isSet = true
}

func (v NullableReadRelationshipsBody) IsSet() bool {
	return v.isSet
}

func (v *NullableReadRelationshipsBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadRelationshipsBody(val *ReadRelationshipsBody) *NullableReadRelationshipsBody {
	return &NullableReadRelationshipsBody{value: val, isSet: true}
}

func (v NullableReadRelationshipsBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadRelationshipsBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


