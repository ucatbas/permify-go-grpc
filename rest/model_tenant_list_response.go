/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the TenantListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantListResponse{}

// TenantListResponse TenantListResponse is the message returned from the request to list all tenants.
type TenantListResponse struct {
	// tenants is a list of tenants.
	Tenants []Tenant `json:"tenants,omitempty"`
	// continuous_token is a string that can be used to paginate and retrieve the next set of results.
	ContinuousToken *string `json:"continuous_token,omitempty"`
}

// NewTenantListResponse instantiates a new TenantListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantListResponse() *TenantListResponse {
	this := TenantListResponse{}
	return &this
}

// NewTenantListResponseWithDefaults instantiates a new TenantListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantListResponseWithDefaults() *TenantListResponse {
	this := TenantListResponse{}
	return &this
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *TenantListResponse) GetTenants() []Tenant {
	if o == nil || IsNil(o.Tenants) {
		var ret []Tenant
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantListResponse) GetTenantsOk() ([]Tenant, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *TenantListResponse) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []Tenant and assigns it to the Tenants field.
func (o *TenantListResponse) SetTenants(v []Tenant) {
	o.Tenants = v
}

// GetContinuousToken returns the ContinuousToken field value if set, zero value otherwise.
func (o *TenantListResponse) GetContinuousToken() string {
	if o == nil || IsNil(o.ContinuousToken) {
		var ret string
		return ret
	}
	return *o.ContinuousToken
}

// GetContinuousTokenOk returns a tuple with the ContinuousToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantListResponse) GetContinuousTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuousToken) {
		return nil, false
	}
	return o.ContinuousToken, true
}

// HasContinuousToken returns a boolean if a field has been set.
func (o *TenantListResponse) HasContinuousToken() bool {
	if o != nil && !IsNil(o.ContinuousToken) {
		return true
	}

	return false
}

// SetContinuousToken gets a reference to the given string and assigns it to the ContinuousToken field.
func (o *TenantListResponse) SetContinuousToken(v string) {
	o.ContinuousToken = &v
}

func (o TenantListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.ContinuousToken) {
		toSerialize["continuous_token"] = o.ContinuousToken
	}
	return toSerialize, nil
}

type NullableTenantListResponse struct {
	value *TenantListResponse
	isSet bool
}

func (v NullableTenantListResponse) Get() *TenantListResponse {
	return v.value
}

func (v *NullableTenantListResponse) Set(val *TenantListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantListResponse(val *TenantListResponse) *NullableTenantListResponse {
	return &NullableTenantListResponse{value: val, isSet: true}
}

func (v NullableTenantListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


