/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the CheckedExpr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckedExpr{}

// CheckedExpr A CEL expression which has been successfully type checked.
type CheckedExpr struct {
	// A map from expression ids to resolved references.  The following entries are in this table:  - An Ident or Select expression is represented here if it resolves to a   declaration. For instance, if `a.b.c` is represented by   `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,   while `c` is a field selection, then the reference is attached to the   nested select expression (but not to the id or or the outer select).   In turn, if `a` resolves to a declaration and `b.c` are field selections,   the reference is attached to the ident expression. - Every Call expression has an entry here, identifying the function being   called. - Every CreateStruct expression for a message has an entry, identifying   the message.
	ReferenceMap *map[string]V1alpha1Reference `json:"referenceMap,omitempty"`
	// A map from expression ids to types.  Every expression node which has a type different than DYN has a mapping here. If an expression has type DYN, it is omitted from this map to save space.
	TypeMap *map[string]V1alpha1Type `json:"typeMap,omitempty"`
	SourceInfo *SourceInfo `json:"sourceInfo,omitempty"`
	// The expr version indicates the major / minor version number of the `expr` representation.  The most common reason for a version change will be to indicate to the CEL runtimes that transformations have been performed on the expr during static analysis. In some cases, this will save the runtime the work of applying the same or similar transformations prior to evaluation.
	ExprVersion *string `json:"exprVersion,omitempty"`
	Expr *Expr `json:"expr,omitempty"`
}

// NewCheckedExpr instantiates a new CheckedExpr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckedExpr() *CheckedExpr {
	this := CheckedExpr{}
	return &this
}

// NewCheckedExprWithDefaults instantiates a new CheckedExpr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckedExprWithDefaults() *CheckedExpr {
	this := CheckedExpr{}
	return &this
}

// GetReferenceMap returns the ReferenceMap field value if set, zero value otherwise.
func (o *CheckedExpr) GetReferenceMap() map[string]V1alpha1Reference {
	if o == nil || IsNil(o.ReferenceMap) {
		var ret map[string]V1alpha1Reference
		return ret
	}
	return *o.ReferenceMap
}

// GetReferenceMapOk returns a tuple with the ReferenceMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckedExpr) GetReferenceMapOk() (*map[string]V1alpha1Reference, bool) {
	if o == nil || IsNil(o.ReferenceMap) {
		return nil, false
	}
	return o.ReferenceMap, true
}

// HasReferenceMap returns a boolean if a field has been set.
func (o *CheckedExpr) HasReferenceMap() bool {
	if o != nil && !IsNil(o.ReferenceMap) {
		return true
	}

	return false
}

// SetReferenceMap gets a reference to the given map[string]V1alpha1Reference and assigns it to the ReferenceMap field.
func (o *CheckedExpr) SetReferenceMap(v map[string]V1alpha1Reference) {
	o.ReferenceMap = &v
}

// GetTypeMap returns the TypeMap field value if set, zero value otherwise.
func (o *CheckedExpr) GetTypeMap() map[string]V1alpha1Type {
	if o == nil || IsNil(o.TypeMap) {
		var ret map[string]V1alpha1Type
		return ret
	}
	return *o.TypeMap
}

// GetTypeMapOk returns a tuple with the TypeMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckedExpr) GetTypeMapOk() (*map[string]V1alpha1Type, bool) {
	if o == nil || IsNil(o.TypeMap) {
		return nil, false
	}
	return o.TypeMap, true
}

// HasTypeMap returns a boolean if a field has been set.
func (o *CheckedExpr) HasTypeMap() bool {
	if o != nil && !IsNil(o.TypeMap) {
		return true
	}

	return false
}

// SetTypeMap gets a reference to the given map[string]V1alpha1Type and assigns it to the TypeMap field.
func (o *CheckedExpr) SetTypeMap(v map[string]V1alpha1Type) {
	o.TypeMap = &v
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *CheckedExpr) GetSourceInfo() SourceInfo {
	if o == nil || IsNil(o.SourceInfo) {
		var ret SourceInfo
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckedExpr) GetSourceInfoOk() (*SourceInfo, bool) {
	if o == nil || IsNil(o.SourceInfo) {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *CheckedExpr) HasSourceInfo() bool {
	if o != nil && !IsNil(o.SourceInfo) {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given SourceInfo and assigns it to the SourceInfo field.
func (o *CheckedExpr) SetSourceInfo(v SourceInfo) {
	o.SourceInfo = &v
}

// GetExprVersion returns the ExprVersion field value if set, zero value otherwise.
func (o *CheckedExpr) GetExprVersion() string {
	if o == nil || IsNil(o.ExprVersion) {
		var ret string
		return ret
	}
	return *o.ExprVersion
}

// GetExprVersionOk returns a tuple with the ExprVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckedExpr) GetExprVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ExprVersion) {
		return nil, false
	}
	return o.ExprVersion, true
}

// HasExprVersion returns a boolean if a field has been set.
func (o *CheckedExpr) HasExprVersion() bool {
	if o != nil && !IsNil(o.ExprVersion) {
		return true
	}

	return false
}

// SetExprVersion gets a reference to the given string and assigns it to the ExprVersion field.
func (o *CheckedExpr) SetExprVersion(v string) {
	o.ExprVersion = &v
}

// GetExpr returns the Expr field value if set, zero value otherwise.
func (o *CheckedExpr) GetExpr() Expr {
	if o == nil || IsNil(o.Expr) {
		var ret Expr
		return ret
	}
	return *o.Expr
}

// GetExprOk returns a tuple with the Expr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckedExpr) GetExprOk() (*Expr, bool) {
	if o == nil || IsNil(o.Expr) {
		return nil, false
	}
	return o.Expr, true
}

// HasExpr returns a boolean if a field has been set.
func (o *CheckedExpr) HasExpr() bool {
	if o != nil && !IsNil(o.Expr) {
		return true
	}

	return false
}

// SetExpr gets a reference to the given Expr and assigns it to the Expr field.
func (o *CheckedExpr) SetExpr(v Expr) {
	o.Expr = &v
}

func (o CheckedExpr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckedExpr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReferenceMap) {
		toSerialize["referenceMap"] = o.ReferenceMap
	}
	if !IsNil(o.TypeMap) {
		toSerialize["typeMap"] = o.TypeMap
	}
	if !IsNil(o.SourceInfo) {
		toSerialize["sourceInfo"] = o.SourceInfo
	}
	if !IsNil(o.ExprVersion) {
		toSerialize["exprVersion"] = o.ExprVersion
	}
	if !IsNil(o.Expr) {
		toSerialize["expr"] = o.Expr
	}
	return toSerialize, nil
}

type NullableCheckedExpr struct {
	value *CheckedExpr
	isSet bool
}

func (v NullableCheckedExpr) Get() *CheckedExpr {
	return v.value
}

func (v *NullableCheckedExpr) Set(val *CheckedExpr) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckedExpr) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckedExpr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckedExpr(val *CheckedExpr) *NullableCheckedExpr {
	return &NullableCheckedExpr{value: val, isSet: true}
}

func (v NullableCheckedExpr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckedExpr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


