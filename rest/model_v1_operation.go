/*
Permify API

Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

API version: v0.10.1
Contact: hello@permify.co
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package permify

import (
	"encoding/json"
)

// checks if the V1Operation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Operation{}

// V1Operation Operation is a message representing a series of operations that can be performed. It includes fields for writing and deleting relationships and attributes.
type V1Operation struct {
	// 'relationships_write' is a repeated string field for storing relationship keys that are to be written or created.
	RelationshipsWrite []string `json:"relationships_write,omitempty"`
	// 'relationships_delete' is a repeated string field for storing relationship keys that are to be deleted or removed.
	RelationshipsDelete []string `json:"relationships_delete,omitempty"`
	// 'attributes_write' is a repeated string field for storing attribute keys that are to be written or created.
	AttributesWrite []string `json:"attributes_write,omitempty"`
	// 'attributes_delete' is a repeated string field for storing attribute keys that are to be deleted or removed.
	AttributesDelete []string `json:"attributes_delete,omitempty"`
}

// NewV1Operation instantiates a new V1Operation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Operation() *V1Operation {
	this := V1Operation{}
	return &this
}

// NewV1OperationWithDefaults instantiates a new V1Operation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1OperationWithDefaults() *V1Operation {
	this := V1Operation{}
	return &this
}

// GetRelationshipsWrite returns the RelationshipsWrite field value if set, zero value otherwise.
func (o *V1Operation) GetRelationshipsWrite() []string {
	if o == nil || IsNil(o.RelationshipsWrite) {
		var ret []string
		return ret
	}
	return o.RelationshipsWrite
}

// GetRelationshipsWriteOk returns a tuple with the RelationshipsWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Operation) GetRelationshipsWriteOk() ([]string, bool) {
	if o == nil || IsNil(o.RelationshipsWrite) {
		return nil, false
	}
	return o.RelationshipsWrite, true
}

// HasRelationshipsWrite returns a boolean if a field has been set.
func (o *V1Operation) HasRelationshipsWrite() bool {
	if o != nil && !IsNil(o.RelationshipsWrite) {
		return true
	}

	return false
}

// SetRelationshipsWrite gets a reference to the given []string and assigns it to the RelationshipsWrite field.
func (o *V1Operation) SetRelationshipsWrite(v []string) {
	o.RelationshipsWrite = v
}

// GetRelationshipsDelete returns the RelationshipsDelete field value if set, zero value otherwise.
func (o *V1Operation) GetRelationshipsDelete() []string {
	if o == nil || IsNil(o.RelationshipsDelete) {
		var ret []string
		return ret
	}
	return o.RelationshipsDelete
}

// GetRelationshipsDeleteOk returns a tuple with the RelationshipsDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Operation) GetRelationshipsDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.RelationshipsDelete) {
		return nil, false
	}
	return o.RelationshipsDelete, true
}

// HasRelationshipsDelete returns a boolean if a field has been set.
func (o *V1Operation) HasRelationshipsDelete() bool {
	if o != nil && !IsNil(o.RelationshipsDelete) {
		return true
	}

	return false
}

// SetRelationshipsDelete gets a reference to the given []string and assigns it to the RelationshipsDelete field.
func (o *V1Operation) SetRelationshipsDelete(v []string) {
	o.RelationshipsDelete = v
}

// GetAttributesWrite returns the AttributesWrite field value if set, zero value otherwise.
func (o *V1Operation) GetAttributesWrite() []string {
	if o == nil || IsNil(o.AttributesWrite) {
		var ret []string
		return ret
	}
	return o.AttributesWrite
}

// GetAttributesWriteOk returns a tuple with the AttributesWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Operation) GetAttributesWriteOk() ([]string, bool) {
	if o == nil || IsNil(o.AttributesWrite) {
		return nil, false
	}
	return o.AttributesWrite, true
}

// HasAttributesWrite returns a boolean if a field has been set.
func (o *V1Operation) HasAttributesWrite() bool {
	if o != nil && !IsNil(o.AttributesWrite) {
		return true
	}

	return false
}

// SetAttributesWrite gets a reference to the given []string and assigns it to the AttributesWrite field.
func (o *V1Operation) SetAttributesWrite(v []string) {
	o.AttributesWrite = v
}

// GetAttributesDelete returns the AttributesDelete field value if set, zero value otherwise.
func (o *V1Operation) GetAttributesDelete() []string {
	if o == nil || IsNil(o.AttributesDelete) {
		var ret []string
		return ret
	}
	return o.AttributesDelete
}

// GetAttributesDeleteOk returns a tuple with the AttributesDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Operation) GetAttributesDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.AttributesDelete) {
		return nil, false
	}
	return o.AttributesDelete, true
}

// HasAttributesDelete returns a boolean if a field has been set.
func (o *V1Operation) HasAttributesDelete() bool {
	if o != nil && !IsNil(o.AttributesDelete) {
		return true
	}

	return false
}

// SetAttributesDelete gets a reference to the given []string and assigns it to the AttributesDelete field.
func (o *V1Operation) SetAttributesDelete(v []string) {
	o.AttributesDelete = v
}

func (o V1Operation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Operation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RelationshipsWrite) {
		toSerialize["relationships_write"] = o.RelationshipsWrite
	}
	if !IsNil(o.RelationshipsDelete) {
		toSerialize["relationships_delete"] = o.RelationshipsDelete
	}
	if !IsNil(o.AttributesWrite) {
		toSerialize["attributes_write"] = o.AttributesWrite
	}
	if !IsNil(o.AttributesDelete) {
		toSerialize["attributes_delete"] = o.AttributesDelete
	}
	return toSerialize, nil
}

type NullableV1Operation struct {
	value *V1Operation
	isSet bool
}

func (v NullableV1Operation) Get() *V1Operation {
	return v.value
}

func (v *NullableV1Operation) Set(val *V1Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Operation) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Operation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Operation(val *V1Operation) *NullableV1Operation {
	return &NullableV1Operation{value: val, isSet: true}
}

func (v NullableV1Operation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Operation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


